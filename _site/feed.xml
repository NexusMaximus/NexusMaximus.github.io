<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-09-10T16:41:32-06:00</updated><id>http://localhost:4000/</id><title type="html">Kyle the (Aspiring) Reverser</title><subtitle>A home for a slew of miscellaneous technical (or not) blogs I write in the process of completing my Masters thesis.</subtitle><entry><title type="html">PMA Ch.6 Lab: Recognizing C Constructs in Assembly</title><link href="http://localhost:4000/labs/2018/09/09/PMA_ch6_labs.html" rel="alternate" type="text/html" title="PMA Ch.6 Lab: Recognizing C Constructs in Assembly" /><published>2018-09-09T14:31:00-06:00</published><updated>2018-09-09T14:31:00-06:00</updated><id>http://localhost:4000/labs/2018/09/09/PMA_ch6_labs</id><content type="html" xml:base="http://localhost:4000/labs/2018/09/09/PMA_ch6_labs.html">&lt;h2 id=&quot;lab-summary-questions&quot;&gt;Lab summary questions&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Considering malware analysis as a whole, how important is it to a general aspiring analyst to complete this chapter’s exercises?&lt;/p&gt;

    &lt;p&gt;This lab may prove to be less challenging for those already aquainted with C programming, but it was still very helpful because of the way it starts off very easy and builds up. I’d argue that this lab was the most fun one I’ve done so far.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What did doing the lab exercises teach that was not gained from reading the chapter?&lt;/p&gt;

    &lt;p&gt;This lab helps fortify the necessity of paying attention to details, and knowing &lt;em&gt;exactly&lt;/em&gt; what the functionality of MSDN functions are.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;challenges-encountered-in-the-labs&quot;&gt;Challenges encountered in the labs&lt;/h2&gt;

&lt;p&gt;I didn’t encounter too many challenges in this lab, but I believe that was due to my knowledge of C programming. It &lt;strong&gt;significantly&lt;/strong&gt; sped up how fast I was able to gather the semantic meaning of the program because I didn’t need to look up nearly as many functions or parameters as I otherwise would have.&lt;/p&gt;

&lt;h2 id=&quot;lab-walkthrough-includes-answers&quot;&gt;Lab Walkthrough (includes answers!)&lt;/h2&gt;

&lt;h3 id=&quot;61&quot;&gt;6.1&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What is the major code construct found in the only subroutine called by &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;?&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch6sc/1_6.1.PNG&quot; alt=&quot;1_6.1.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;It’s an ‘if’ condition checking whether or not we’re connected to the internet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the subroutine located at &lt;code class=&quot;highlighter-rouge&quot;&gt;0x40105F&lt;/code&gt;?&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sub_40105F&lt;/code&gt; is called if the code finds there is an internet connection. The first function call in this _stbuf(), which &lt;a href=&quot;https://social.msdn.microsoft.com/Forums/vstudio/en-US/838011e2-7404-4922-989e-3ceacd6e3127/how-about-the-function-stbufstdout-woks-?forum=vclanguage&quot;&gt;appears to be called in preparation for sending content to stdout&lt;/a&gt;. This is enough for me to believe that this function is simply a print function.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the purpose of this program?&lt;/p&gt;

    &lt;p&gt;The purpose of this program is to print whether or not an internet connection can be made.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;62&quot;&gt;6.2&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What operation does the first subroutine called by &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; perform?&lt;/p&gt;

    &lt;p&gt;The first subroutine called by main is &lt;code class=&quot;highlighter-rouge&quot;&gt;sub_401000&lt;/code&gt;, which appears to be the exact same subroutine we analyzed in the problem above (i.e. the one that checks to see if we have an internet connection).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the subroutine located at &lt;code class=&quot;highlighter-rouge&quot;&gt;0x40117F&lt;/code&gt;?&lt;/p&gt;

    &lt;p&gt;This is printf (same answer to 6.1.2).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What does the second subroutine called by &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; do?&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sub_401040&lt;/code&gt;, the second subroutine, phones home looking to get a command, presumably to execute on the infected machine.&lt;/p&gt;

    &lt;p&gt;The function opens a handle to an internet resource (in this case practicalmalwareanalysis.com/cc.htm), and then, if that succeeds, heads to loc_40109d to read 0x200 bytes into a buffer using the InternetReadFile function.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch6sc/6_6.2.PNG&quot; alt=&quot;6_6.2.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;We see here that it moves in the dereferenced pointer to the buffer into ecx (i.e. the first character of the buffer), and then compares it to ascii 60. Ascii 60 corresponds to the “&amp;lt;” character, which is the first character of an HTML tag. Immediately after that, it compares to ascii 33, which is the “!” character. Then, it looks for 0x2d or 45 in decimal, which is a “-“ character. It does this twice. If at any time it detects characters that are not these, in this order, it breaks to loc_40111D, which yields an error.&lt;/p&gt;

    &lt;p&gt;So it’s looking for the string “&amp;lt;!–”. This is how a comment in an HTML document is started. We can conclude it’s looking for an HTML comment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What type of code construct is used in this subroutine?&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch6sc/2_6.2.PNG&quot; alt=&quot;2_6.2.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;This looks like a switch nested within an if-statement.&lt;/p&gt;

    &lt;p&gt;Note from after reading the book: the answer they were looking for was an array. There is an array at work here as well, as one can tell from the above screenshot. Bytes of data one byte apart from each other, and referenced in terms of ebp, are sequentially compared, which is indicative of an array.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are there any network-based indicators for this program?&lt;/p&gt;

    &lt;p&gt;Absolutely. We see that this block of data gets pushed as a parameter to InternetOpenUrlA:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch6sc/3_6.2.PNG&quot; alt=&quot;3_6.2.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;And we can see what the rest of the data is by clicking szUrl.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch6sc/4_6.2.PNG&quot; alt=&quot;4_6.2.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://www.practicalmalwareanalysis.com/cc.htm&lt;/code&gt; is what the network fellas should look for.&lt;/p&gt;

    &lt;p&gt;The book also mentions that we can look for the user agent that this program uses, which makes sense.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the purpose of this malware?&lt;/p&gt;

    &lt;p&gt;The purpose of this malware is to phone home and get commands to execute on the infected machine.&lt;/p&gt;

    &lt;p&gt;If the code passes the HTML comment check, then it moves the character immediately proceeding the comment into al (which is eax’s lowest 8 bits) and returns. Then, that single character is moved into the pointer pointing to the memory address contained within ebp+var_8. This character is then pushed to be in a function that prints a single character immediately before a command, which is indicative that there are a predefined set of commands, each corresponding to a single character, that this malware can run. The purpose of the malware is to get a single character command and do something with it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;63&quot;&gt;6.3&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Compare the calls in &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; to Lab 6.2’s &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; method. What is the new funtion called from &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;?&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch6sc/5_6.3.PNG&quot; alt=&quot;5_6.3.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;The new function appears to be shortly after the parsing actions. I presume this function will execute the command received and parsed from the internet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What parameters does this new function take?&lt;/p&gt;

    &lt;p&gt;Function sub_401130 takes two arguments:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;LpExistingfileName, which is, &lt;em&gt;I believe&lt;/em&gt;, the name of itself. The &lt;code class=&quot;highlighter-rouge&quot;&gt;argv&lt;/code&gt; pointer is equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;argv[0]&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;argv[0]&lt;/code&gt; is conventionally the name of the program being executed.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;a magic character. From analysis of 6.2, we are highly confident that this particular character corresponds to a command to execute.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What major code construct does this function contain?&lt;/p&gt;

    &lt;p&gt;Ida has identified a switch. BEAUTIFUL.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch6sc/7_6.3switch.PNG&quot; alt=&quot;7_6.3switch.PNG&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What can this function do?&lt;/p&gt;

    &lt;p&gt;The function puts the character into ecx and subtracts 97. 97 corresponds to ascii ‘a’. It then jumps to a default case if the resulting number is above 4 (i.e. if the character command was not a, b, c, d, or e).&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch6sc/8_6.3.PNG&quot; alt=&quot;8_6.3.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;We see now why it subtracted 97– the resulting number is used as an index in a 5-case jump table.&lt;/p&gt;

    &lt;p&gt;The cases are:&lt;/p&gt;
    &lt;ol start=&quot;0&quot;&gt;
 &lt;li&gt; Create directory &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\\Temp&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt; Copy itself into directory &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\\Temp&lt;/code&gt;, renaming itself &lt;code class=&quot;highlighter-rouge&quot;&gt;cc.exe&lt;/code&gt; (but if the file exists it will not overwrite the existing file)&lt;/li&gt;
 &lt;li&gt; Delete file &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\\Temp\\cc.exe&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt; Modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;Software\\Microsoft\\Windows\\CurrentVersion\\Run&lt;/code&gt; registry key. It adds a new service &lt;code class=&quot;highlighter-rouge&quot;&gt;malware&lt;/code&gt; and sets it to execute &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\\Temp\\cc.exe&lt;/code&gt;. This establishes persistence on the infected machine. &lt;/li&gt;
 &lt;li&gt; Sleep for 100000. The sleep function accepts an integer that represents milliseconds, so it sleeps for 100000/1000 = 100 seconds. &lt;/li&gt;
 &lt;li&gt; (Default case) Print an error message that says it's not a valid command. &lt;/li&gt;&lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are there any host-based indicators for this malware?&lt;/p&gt;

    &lt;p&gt;Most definitely.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;From case 1 above: if &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Temp&lt;/code&gt; exists, you may be infected.&lt;/li&gt;
      &lt;li&gt;From case 2 above: if &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Temp\cc.exe&lt;/code&gt; exists, you are almost surely infected.&lt;/li&gt;
      &lt;li&gt;From case 3 above: if the registry has added &lt;code class=&quot;highlighter-rouge&quot;&gt;Malware&lt;/code&gt; as a service that executes &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Temp\cc.exe&lt;/code&gt;, you’re certainly infected.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the purpose of this malware?&lt;/p&gt;

    &lt;p&gt;The purpose of this malware is to copy itself into a folder and establish persistence, depending on commands it receives from the internet. If the internet cannot be reached, it terminates. My guess is switch case 4 will be a cooler evil payload in 6.4.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;64&quot;&gt;6.4&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What’s the difference between the calls made from the &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; method in Labs 6-3 and 6-4?&lt;/p&gt;

    &lt;p&gt;They are at different addresses, I believe. I’m not going to put too much time into comparing the two, because being able to compare things is a skill I already have.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What new code construct has been added to &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;?&lt;/p&gt;

    &lt;p&gt;Ah, now we have the same functionality wrapped in a loop. It will wait 60 seconds every iteration, and execute 1440 times (presuming it’s connected to the internet).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What’s the difference between this lab’s parse HTML function and those of the previous labs?&lt;/p&gt;

    &lt;p&gt;Different user agent?&lt;/p&gt;

    &lt;p&gt;After reading book: Ah yes, it builds a separate user agent using &lt;code class=&quot;highlighter-rouge&quot;&gt;sprintf&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch6sc/9_6.4.PNG&quot; alt=&quot;9_6.4.PNG&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How long will this program run? (Assume it’s connected to the internet.)&lt;/p&gt;

    &lt;p&gt;It runs 1440 times * 60 seconds. That’s 1440 minutes, which is 24 hours.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are there any new network-based indicators for this malware?&lt;/p&gt;

    &lt;p&gt;A different user agent that’ll follow the format of &lt;code class=&quot;highlighter-rouge&quot;&gt;Internet Explorer 7.50/pma%d&lt;/code&gt;, where the number substituted for %d is the iteration number that the malware is on. This can be used as input to the command &amp;amp; control server to serve a HTML file with a different command depending on what iteration the malware is on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What’s the purpose of this malware?&lt;/p&gt;

    &lt;p&gt;The same as previous samples, but upgraded grab MULTIPLE commands from the command and control server back home.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Lab summary questions Considering malware analysis as a whole, how important is it to a general aspiring analyst to complete this chapter’s exercises?</summary></entry><entry><title type="html">PMA Ch. 6 notes: Recognizing C Code Constructs in Assembly</title><link href="http://localhost:4000/notes/2018/09/08/ch6_PMA_notes.html" rel="alternate" type="text/html" title="PMA Ch. 6 notes: Recognizing C Code Constructs in Assembly" /><published>2018-09-08T14:31:00-06:00</published><updated>2018-09-08T14:31:00-06:00</updated><id>http://localhost:4000/notes/2018/09/08/ch6_PMA_notes</id><content type="html" xml:base="http://localhost:4000/notes/2018/09/08/ch6_PMA_notes.html">&lt;h2 id=&quot;chapter-summary-questions&quot;&gt;Chapter summary questions&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In two sentences or less, provide an overview of what this chapter is about.&lt;/p&gt;

    &lt;p&gt;This chapter introduces how some common C code constructs look when implemented in assembly. Being able to understand what these constructs looks like is extremely helpful when analyzing malware as it’ll provide insight into the general functionality of the malware, more quickly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the three most important takeaways from this chapter?&lt;/p&gt;

    &lt;p&gt;Practice is the only thing that will help a new malware analyst recognize general semantics of a program.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What problems does this chapter address? In other words, why should we care about this chapter?&lt;/p&gt;

    &lt;p&gt;This chapter provides exercises to quickly speed up analysis of executables by providing a foundation for understanding what common code constructs &lt;em&gt;generally&lt;/em&gt; look in assembly. It is, however, no substitute for practicing. Labs coming soon.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;terminology&quot;&gt;Terminology&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;code construct&lt;/strong&gt;: a code abstraction level that defines a functional property, but not the details of its implementation. 
	* if statements, for loops, switches, linked lists, etc&lt;/p&gt;

&lt;h2 id=&quot;page-to-page-notes&quot;&gt;Page-to-page notes&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;This is the part of malware analysis in which it becomes easy to get bogged down with weeds. Keeping the overall picture in mind and not getting infatuated with unnecesary details is very important.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;global-vs-local-variables&quot;&gt;Global vs Local variables&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Global variables are referenced by memory address.&lt;/li&gt;
  &lt;li&gt;Local variables are referenced relative to the stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;different-calling-conventions&quot;&gt;Different Calling Conventions&lt;/h3&gt;

&lt;h4 id=&quot;cdecl&quot;&gt;cdecl&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Parameters pushed ontothe stack from right to left.&lt;/li&gt;
  &lt;li&gt;Caller cleans up stack when function is complete.&lt;/li&gt;
  &lt;li&gt;Return value stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;eax.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;stdcall&quot;&gt;stdcall&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Similar to cdecl, except that stdcall requires the &lt;em&gt;callee&lt;/em&gt; to clean up the stack when the function is complete.&lt;/li&gt;
  &lt;li&gt;Windows API uses stdcall by convention.
    &lt;ul&gt;
      &lt;li&gt;Any code calling API functions will therefore not need to clean up the stack, since that’s the responsibility of the DLL that implement code for the API functions.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;fastcall&quot;&gt;fastcall&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;The first few arguments (typically two) are passed in via registers (usually &lt;code class=&quot;highlighter-rouge&quot;&gt;edx&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ecx&lt;/code&gt;). Additional arguments are loaded from right to left.&lt;/li&gt;
  &lt;li&gt;Calling function is usually responsible for cleaning up the stack, if necessary.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;In general, you won’t know what your malware was compiled with, so you should know the concepts behind why the calling conventions work, so you can recognize the semantics of any calling convention.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;notes-on-specific-constructs&quot;&gt;Notes on specific constructs&lt;/h3&gt;

&lt;h4 id=&quot;switch-statements&quot;&gt;Switch statements&lt;/h4&gt;
&lt;p&gt;Switches are typically implemented in one of two ways: the if-style, or jump tables.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If style: each case statement is compared to the switch conditional variable. Typically there are lots of jz’s and cmp’s in these.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Jump table style: Typically seen with large, contiguous switch statements, the compiler optimizes away lots of the comparisons. In this case, there is a lot of &lt;code class=&quot;highlighter-rouge&quot;&gt;dd offset loc_abcd&lt;/code&gt; statements following each other, and the switch variable is used as an index into that table to identify which block of code to hop to (i.e. which case to evaluate).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;arrays&quot;&gt;Arrays&lt;/h4&gt;
&lt;p&gt;Ararys are accessed using a base address as a starting point. The size of each element is not always obious, but it can be determined by seeing how the array is being indexed.&lt;/p&gt;</content><author><name></name></author><summary type="html">Chapter summary questions In two sentences or less, provide an overview of what this chapter is about.</summary></entry><entry><title type="html">PMA Ch.5 Lab: Ida Pro Practice</title><link href="http://localhost:4000/labs/2018/09/05/PMA_Ch5_Labs.html" rel="alternate" type="text/html" title="PMA Ch.5 Lab: Ida Pro Practice" /><published>2018-09-05T10:31:00-06:00</published><updated>2018-09-05T10:31:00-06:00</updated><id>http://localhost:4000/labs/2018/09/05/PMA_Ch5_Labs</id><content type="html" xml:base="http://localhost:4000/labs/2018/09/05/PMA_Ch5_Labs.html">&lt;p&gt;Use only Ida Pro to analyze Lab05-01.dll.&lt;/p&gt;

&lt;h2 id=&quot;lab-summary-questions&quot;&gt;Lab summary questions&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Considering malware analysis as a whole, how important is it to a general aspiring analyst to complete this chapter’s exercises?&lt;/p&gt;

    &lt;p&gt;As important as the rest of the book thus far. Being able to use Ida to navigate through the binary and answer general questions about an executable is an imperative skill for malware analysts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What did doing the lab exercises teach that was not gained from reading the chapter?&lt;/p&gt;

    &lt;p&gt;Tons of practice using Ida. Also, it helped me appreciate how quickly it is to accedentally misrepresent certain portions of disassembly (via accedentally converting instructions to constants, or strings to code, or etc). However, this can usually be undone, and “undefining” the data is very helpful in a lot of cases. (&lt;strong&gt;U&lt;/strong&gt; undefines data.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;challenges-encountered-in-the-labs&quot;&gt;Challenges encountered in the labs&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Ida pro is needed for a couple of questions of this lab, and unfortunately, I don't have that.

Furthermore, I struggled with the symbolic constant naming portion of the lab simply because a DLL referenced in the book didn't seem to exist within my virtual environment. The problem was sidestepped via looking directly at MSDN documentation. See below for details on where the problem was encountered. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;lab-walkthrough-includes-answers&quot;&gt;Lab Walkthrough (includes answers!)&lt;/h2&gt;

&lt;p&gt;First thing I did was change the settings to include addresses in graph mode, as was suggested by the authors of the book.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/ch5_sc/01_IdaOptionsForGraphMode.PNG&quot; alt=&quot;01_ida.PNG&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;51&quot;&gt;5.1&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What is the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;DllMain&lt;/code&gt;?&lt;/p&gt;

    &lt;p&gt;This one is easy enough. Just look in the functions window, scroll down to DllMain, and click it.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x1000D02E&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch5_sc/02_DllMain.PNG&quot; alt=&quot;02_DllMain&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use the Imports window to browse to &lt;code class=&quot;highlighter-rouge&quot;&gt;gethostbyname&lt;/code&gt;. Where is the import located?&lt;/p&gt;

    &lt;p&gt;Imports is a tab at the top of the disassembly window. Going in there and hitting &lt;strong&gt;ctrl+f&lt;/strong&gt; to search for &lt;code class=&quot;highlighter-rouge&quot;&gt;gethostbyname&lt;/code&gt; is how I arrived at this answer.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch5_sc/03_gethostbyname.PNG&quot; alt=&quot;03_gethostbyname&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How many functions call &lt;code class=&quot;highlighter-rouge&quot;&gt;gethostbyname&lt;/code&gt;?&lt;/p&gt;

    &lt;p&gt;Ah, we need to find all cross references to &lt;code class=&quot;highlighter-rouge&quot;&gt;gethostbyname&lt;/code&gt; and count the number of unique functions in them. . Do this by hitting &lt;strong&gt;x&lt;/strong&gt; while &lt;code class=&quot;highlighter-rouge&quot;&gt;gethostbyname&lt;/code&gt; is selected.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch5_sc/04_xrefsGHBN.PNG&quot; alt=&quot;04_xrefsGHBN&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;I count &lt;strong&gt;5&lt;/strong&gt; unique functions.&lt;/p&gt;

    &lt;p&gt;This looks like good information, but what’s that strange letter in the second column? What do the letters stand for? This helpful &lt;a href=&quot;https://resources.infosecinstitute.com/ida-cross-references-xrefs/#gref&quot;&gt;post&lt;/a&gt; provided me insight into the three types of cross references.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;r: read&lt;/li&gt;
      &lt;li&gt;w: write&lt;/li&gt;
      &lt;li&gt;p: pointer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Focusing on the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;gethostbyname&lt;/code&gt; located at 0x100001757, can you figure out which DNS request will be made?&lt;/p&gt;

    &lt;p&gt;I had a minor panic attack when I didn’t see address 10001757 above, but then I noticed if we do some simple math we find that 1001656 + 101 gives us that number. Woo, ADDITION&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch5_sc/05_10001757.PNG&quot; alt=&quot;10001757.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;eax&lt;/code&gt; is being pushed as a parameter. If you hover over the operand for mov, it says “[this is RDO]pics.practicalmalwareanalys…”. Then 0xD is added to this, which pushes the offset to the beginning of the URL.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;pics.practicalmalwareanalysis.com&lt;/strong&gt; is the DNS request being made.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How many local variables has IDA Pro recognized for the subroutine at 0x10001656?&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch5_sc/06_10001656.PNG&quot; alt=&quot;10001656.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Let’s count em! I believe every variable in the list is a local variable, and there are &lt;strong&gt;24&lt;/strong&gt; of these. But wait! One of the elements of this list is lpThreadParameter, which is actually a parameter. So, 24-1=&lt;strong&gt;23&lt;/strong&gt; local variables.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How many parameters has IDA Pro recognized for the subroutine at 0x10001656?&lt;/p&gt;

    &lt;p&gt;Looking at how the function is called, I see one parameter: lpThreadParameter. &lt;strong&gt;1&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use the Strings window to locate the string \cmd.exe /c in the disassembly. Where is it located?&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch5_sc/08_stringscmd.PNG&quot; alt=&quot;08_stringscmd.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;0x10095B34&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is happening in the area of code that references \cmd.exe /c?&lt;/p&gt;

    &lt;p&gt;Double click the string, then click the address of this string in the disassembler and find cross references. Find that there is only one:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch5_sc/09_xrefcmd.PNG&quot; alt=&quot;09_xrefcmd.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Proceed to click this reference to see what’s going on and Ida helps us identify quickly that it’s a check to see whether cmd.exe or command.exe is the correct command to run command prompt on whatever version of Windows this malware is attacking.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch5_sc/10_cmdorcommand.PNG&quot; alt=&quot;10_cmdorcommand.PNG&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the same area, at 0x100101C8, it looks like dword_1008E5C4 is a global variable that helps decide which path to take. How does the malware set dword_1008E5C4? (Hint: Use dword_1008E5C4’s cross-references.)&lt;/p&gt;

    &lt;p&gt;If we look at the xrefs of this, there are three. Two are reads, and one is a write. The write is the one we are interested in because writing the variable implies that’s where it’s set to something. So if we look at where that happens…:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch5_sc/11_xref1008e5c4.PNG&quot; alt=&quot;11_xref1008e5c4.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;So, that area is populated with whatever is in &lt;code class=&quot;highlighter-rouge&quot;&gt;eax&lt;/code&gt; after function &lt;code class=&quot;highlighter-rouge&quot;&gt;sub_10003695&lt;/code&gt; runs. Usually &lt;code class=&quot;highlighter-rouge&quot;&gt;eax&lt;/code&gt; contains return values, so we want to investigate what this function does.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch5_sc/12_sub_10003695.PNG&quot; alt=&quot;12_sub_10003695.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;This function is a wrapper for the Microsoft function GetVersionExA, which can quickly be identified (via a google search) as a function that returns the operating system version running on the machine.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A few hundred lines into the subroutine at 0x1000FF58, a series of comparisons use memcmp to compare strings. What happens if the string comparison to robotwork is successful (when memcmp returns 0)?&lt;/p&gt;

    &lt;p&gt;Look at the strings, identify where “robotwork” is, cross reference it, find it’s used here:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch5_sc/13_robotwork.PNG&quot; alt=&quot;13_robotwork.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;So if the comparison returns 0, then eax will be 0. Test sets the flags, and then JNZ jumps if not zero, meaning the jump will be taken (the green path) if the zero flag is NOT set. The question asks what happens if memcmp returns 0, which would result in the zero flag being set, which means this jump will NOT be taken, so we follow the red path.&lt;/p&gt;

    &lt;p&gt;The red path takes us to a guaranteed calling of sub_100052A2 with parameter “s”. This function appears to query a registry key to find some data value labeled as Robot_Worktime.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What does the export PSLIST do?&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch5_sc/14_pslist.PNG&quot; alt=&quot;14_pslist.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;After briefly looking over the functions called from within PSLIST I believe PSLIST is looking through a set of processes trying to find one to inject code with.  (I see “OpenProcess” in each function guaranteed to be called from within PSLIST).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use the graph mode to graph the cross-references from sub_10004E79. Which API functions could be called by entering this function? Based on the API functions alone, what could you rename this function?&lt;/p&gt;

    &lt;p&gt;After finding the function and getting its disassembly onscreen, I went to &lt;strong&gt;view -&amp;gt; graphs -&amp;gt; Xrefs from:&lt;/strong&gt; and obtained this graph.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch5_sc/15_xrefFrom.PNG&quot; alt=&quot;15_xrefFrom.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;strlen, sprintf, GetSystemDefaultLangId, malloc, send, free&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;I’d name it something like &lt;code class=&quot;highlighter-rouge&quot;&gt;SendSystemLanguage&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How many Windows API functions does DllMain call directly? How many at a depth of 2?&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch5_sc/16_dllMainXrefs.PNG&quot; alt=&quot;16_dllMainXrefs.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Four direct calls: &lt;strong&gt;Strncpy, createThread, strlen, _strnicmp&lt;/strong&gt;.&lt;/p&gt;

    &lt;p&gt;In order to view calls at a depth of two, we can go to &lt;strong&gt;view -&amp;gt; graphs -&amp;gt; User Xref chart&lt;/strong&gt; and choose a recurive depth of 2. However, this doesn’t seem to have any affect on Ida demo and i’m not sure why. The information could be derived manually, however, from doing xref charts on each of the above listed functions, so I’m not going to spend more time on it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At 0x10001358, there is a call to Sleep (an API function that takes one parameter containing the number of milliseconds to sleep). Looking backward through the code, how long will the program sleep if this code executes?&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch5_sc/17_sleep.PNG&quot; alt=&quot;17_sleep.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;A pointer to the string “[This is CTI]30” is moved into &lt;code class=&quot;highlighter-rouge&quot;&gt;eax&lt;/code&gt;. Then, 0xD is added to it, which moves forward the address to point directly to the “30” part of the string. Then, atoi converts it to a number and stores it in &lt;code class=&quot;highlighter-rouge&quot;&gt;eax&lt;/code&gt;. Up next, 0x3E8 is multiplied into the 30 in &lt;code class=&quot;highlighter-rouge&quot;&gt;eax&lt;/code&gt;. I clicked this hex number and hit &lt;strong&gt;h&lt;/strong&gt; to turn it into a decimal number, which is 1000. So, 30*1000 is 30,000 milliseconds, which is &lt;strong&gt;30 seconds.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At 0x10001701 is a call to socket. What are the three parameters?&lt;/p&gt;

    &lt;p&gt;Do a ‘goto’ and go to that address. Ida lists what the three parameters are:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Protocol: 6&lt;/li&gt;
      &lt;li&gt;Type: 1&lt;/li&gt;
      &lt;li&gt;af: 2&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;All we need to do is identify what those numbers refer to. Pull up the microsoft documentation for &lt;code class=&quot;highlighter-rouge&quot;&gt;socket&lt;/code&gt; and we find that:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Protocol of 6 refers to IPPROTO_TCP, which (shockingly) configures the socket to use the TCP protocol.&lt;/li&gt;
      &lt;li&gt;Type of 1 means SOCK_STREAM, which is ‘a socket type that provides sequenced, reliable, two-way connection-based byte streams with an OOB data transmission mechanism.’&lt;/li&gt;
      &lt;li&gt;af (address family) of 2 means AF_INET– IPv4 address families.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using the MSDN page for socket and the named symbolic constants functionality in IDA Pro, can you make the parameters more meaningful? What are the parameters after you apply changes?&lt;/p&gt;

    &lt;p&gt;We can make the parameters more meaningful, &lt;em&gt;if Ida Demo actually found the right library to load.&lt;/em&gt; It’s slightly inconvenient to look at MSDN documentation, but it gets the job done, so I’m going to move on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Search for usage of the in instruction (opcode 0xED). This instruction is used with a magic string VMXh to perform VMware detection. Is that in use in this malware? Using the cross-references to the function that executes the in instruction, is there further evidence of VMware detection?&lt;/p&gt;

    &lt;p&gt;If we do a &lt;strong&gt;search -&amp;gt; text&lt;/strong&gt; and click &lt;strong&gt;find all occurances&lt;/strong&gt; and search for the text &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt;, we find that in the resulting list there is only one &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; instruction. If we go to that location and cross reference the function that contains the instruction, we find that three functions call it: InstallRT, InstallSA, and InstallSB. The functions all look very similar. There certainly is evidence of VMWare detection.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch5_sc/18_vmwaredetect.PNG&quot; alt=&quot;18_vmwaredetect&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Jump your cursor to 0x1001D988. What do you find?&lt;/p&gt;

    &lt;p&gt;We find information interpreted as characters by Ida.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch5_sc/19_1001d988.PNG&quot; alt=&quot;1001d988&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you have the IDA Python plug-in installed (included with the commercial version of IDA Pro), run Lab05-01.py, an IDA Pro Python script provided with the malware for this book. (Make sure the cursor is at 0x1001D988.) What happens after you run the script?&lt;/p&gt;

    &lt;p&gt;I don’t have Ida Pro :/&lt;/p&gt;

    &lt;p&gt;But the book states that the obfuscated string would be decoded to reveal a backdoor.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With the cursor in the same location, how do you turn this data into a single ASCII string?&lt;/p&gt;

    &lt;p&gt;You’d hit the A key to turn it into a readable string after running the plugin.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open the script with a text editor. How does it work?&lt;/p&gt;

    &lt;p&gt;I’ll omit this question since I cannot figure it out without doing the above two parts legitimately.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Use only Ida Pro to analyze Lab05-01.dll.</summary></entry><entry><title type="html">PMA Ch.5 notes: IDA Pro</title><link href="http://localhost:4000/notes/2018/09/04/ch5_PMA_notes.html" rel="alternate" type="text/html" title="PMA Ch.5 notes: IDA Pro" /><published>2018-09-04T18:32:00-06:00</published><updated>2018-09-04T18:32:00-06:00</updated><id>http://localhost:4000/notes/2018/09/04/ch5_PMA_notes</id><content type="html" xml:base="http://localhost:4000/notes/2018/09/04/ch5_PMA_notes.html">&lt;p&gt;There is a HUGE amount of content to know about IDA, and these notes hardly puts a dent in covering the helpful content.&lt;/p&gt;

&lt;h2 id=&quot;chapter-summary-questions&quot;&gt;Chapter summary questions&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In two sentences or less, provide an overview of what this chapter is about.&lt;/p&gt;

    &lt;p&gt;This chapter introduces Ida Pro, which is one of the most important tools in the market.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the three most important takeaways from this chapter?&lt;/p&gt;

    &lt;p&gt;Ida is an extremely powerful tool, and the information in the chapter is just barely enough to &lt;em&gt;get started&lt;/em&gt;. More will be provided as the book continues.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What problems does this chapter address? In other words, why should we care about this chapter?&lt;/p&gt;

    &lt;p&gt;This chapter is more of a flyover tutorial than a conceptually dense section of the book. As such, we should care because it provides tips and tricks to get a novice reverser up and running with Ida.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;terminology&quot;&gt;Terminology&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Rebasing&lt;/strong&gt;: PE files are compiled to load at a preferred base address. If the Windows loader cannot use this address (say, because it’s taken up by another program), then &lt;em&gt;rebasing&lt;/em&gt; may occur. It’s not explicitly defined in this chapter, but they do mention that if DLLs appear to be loading into processes different than what Ida says, the DLL may be being rebased, and this can be fixed by clicking the &lt;em&gt;Manual Load&lt;/em&gt; checkbox on the load file window.&lt;/p&gt;

&lt;h2 id=&quot;ida-cheatsheet&quot;&gt;Ida Cheatsheet&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;switch between graph mode and text mode: &lt;strong&gt;space&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cross references are things that help you find where certain names are used. Think of it as the opposite of clicking a link– it goes the other direction. Find cross references with &lt;strong&gt;x&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Jumping to a virtual address can be done with &lt;strong&gt;g&lt;/strong&gt;. GOTO, of course!
    &lt;ul&gt;
      &lt;li&gt;Jumping to a raw offset is possible too with &lt;strong&gt;jump -&amp;gt; jump to file offset&lt;/strong&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Has Ida failed to identify some code as a function? Create it by pressing &lt;strong&gt;p&lt;/strong&gt;.
    &lt;ul&gt;
      &lt;li&gt;Has Ida also failed to identify a EBP-based stack frame, and thus not abstracted away some simple changes that add for readability (like putting variable names into assembly instruction operand spots)? Try &lt;strong&gt;Alt+p&lt;/strong&gt;, select &lt;strong&gt;BP based frame&lt;/strong&gt;, and specify &lt;strong&gt;4 bytes for saved registers.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add your own comments to places by putting the cursor on a line of a disassembly and hitting &lt;strong&gt;:&lt;/strong&gt;. OR BETTER YET: put a comment on an address that has cross-references to it, and have the comment be repeated: hit &lt;strong&gt;;&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sometimes Ida mislabels numbers to be addresses, or vice versa, since everything’s a number under the hood anyway. Change numbers to cross-referencable addresses and back via &lt;strong&gt;O&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To represent highlighted bytes as code: &lt;strong&gt;C&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;To represent defined code as not a function, code, or data: &lt;strong&gt;U&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ida-tips-and-tricks&quot;&gt;Ida Tips and Tricks&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;When Idaing, you may find a few keystrokes suddenly causes the interface to become impossible to navigate (imagine the first couple times you used Vim). Reset the interface with &lt;strong&gt;Windows -&amp;gt; reset desktop.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Similarly, if you love your current desktop configuration, do a &lt;strong&gt;Windows -&amp;gt; save desktop&lt;/strong&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Graph mode excludes certain helpful info, such as line numbers and op codes. Change this:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Options -&amp;gt; general -&amp;gt; select &lt;code class=&quot;highlighter-rouge&quot;&gt;line prefixes&lt;/code&gt;&lt;/strong&gt; and set number of opcode bytes to 6. Most instructions are 6 or less bytes, so setting this to 6 will allow one to see the memory locations and opcode values for each instruction in the code listing.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Auto Comments&lt;/strong&gt; can help aid analysis via adding assembly comments throughout the disassembly window. Go to &lt;strong&gt;Options -&amp;gt; General&lt;/strong&gt; and click the &lt;strong&gt;Auto Comments&lt;/strong&gt; checkbox.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;For information on plugins for Ida, see page 103. I’m not good enough to appreciate that yet, so I’m putting this subsection on the backburner for now.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;useful-analysis-windows&quot;&gt;Useful Analysis Windows&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Functions Window&lt;/em&gt;: lists all functions in the executable and each function’s length.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Names window&lt;/em&gt;: Lists every address with a name, including functions, named code, named data, and strings.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Strings window&lt;/em&gt;: Shows all strings. Default is ASCII only; longer than 5 characters.
    &lt;ul&gt;
      &lt;li&gt;Can change this by right-clicking in the strings window and selecting setup.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Imports/Exports windows&lt;/em&gt;: self-explanatory. The exports window is helpful when analyzing DLLs (since DLLs provide exports).&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Structures window&lt;/em&gt;: Lists the layout of all active data structures.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;In general, double clicking stuff in windows will link back to the disassembly window.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;searching&quot;&gt;Searching&lt;/h3&gt;
&lt;p&gt;The Search functionality in the disassembly window is helpful. See p.94 for more details about common searches (if they aren’t self explanatory in Ida). (Search -&amp;gt; next code, search -&amp;gt; test, search-&amp;gt; sequence of bytes for starters)&lt;/p&gt;

&lt;h3 id=&quot;graphing-options&quot;&gt;Graphing Options&lt;/h3&gt;
&lt;p&gt;Graphing options help provide insight into the control flow of the program. However, due to how they are used, it  wouldn’t be very helpful for me to annotate this section as it’s so diagram dependent. Look at page 98 for graphing options information.&lt;/p&gt;

&lt;h3 id=&quot;enhancing-the-disassembly&quot;&gt;Enhancing the disassembly&lt;/h3&gt;

&lt;h4 id=&quot;renaming-locations&quot;&gt;Renaming Locations&lt;/h4&gt;
&lt;p&gt;Should be doable by right clicking names of things like sub_400699. Changes propogate throughout the program.&lt;/p&gt;

&lt;h4 id=&quot;comments&quot;&gt;Comments&lt;/h4&gt;
&lt;p&gt;Add your own comments to places by putting the cursor on a line of a disassembly and hitting &lt;strong&gt;:&lt;/strong&gt;. OR BETTER YET: put a comment on an address that has cross-references to it, and have the comment be repeated: hit &lt;strong&gt;;&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;formatting-operands&quot;&gt;Formatting operands&lt;/h4&gt;
&lt;p&gt;You can right click constants and represent the data there in a plethora of ways (binary, octal, hex, decimal).&lt;/p&gt;

&lt;p&gt;Imagine &lt;code class=&quot;highlighter-rouge&quot;&gt;stdin.&lt;/code&gt; What number comes straight to mind? 0, of course! &lt;code class=&quot;highlighter-rouge&quot;&gt;stdin&lt;/code&gt; is a named constant of sorts. Ida can help reverse where a compiler plugged in a number for a named constant in the initial source code. The option to do so is given in the same menu as the above options.&lt;/p&gt;

&lt;p&gt;If the constants don’t show up, then the proper libraries that correspond to those function calls may not be loaded in Ida. Do a &lt;strong&gt;View -&amp;gt; open subviews -&amp;gt; type libraries&lt;/strong&gt; to get to the submenu to change that.&lt;/p&gt;

&lt;h4 id=&quot;loading-symbolic-constants&quot;&gt;Loading symbolic constants&lt;/h4&gt;
&lt;p&gt;If you have random looking numbers being passed to Windows API functions, you can have Ida identify what constants those numbers refer to. Go to &lt;strong&gt;View -&amp;gt; Open Subviews -&amp;gt; Type Libraries&lt;/strong&gt; and then right click and load a new library. Look for &lt;code class=&quot;highlighter-rouge&quot;&gt;ntapi&lt;/code&gt; and load it. (I presume this will work assuming &lt;code class=&quot;highlighter-rouge&quot;&gt;ntapi&lt;/code&gt; shows up, which, in my case, it does &lt;em&gt;not&lt;/em&gt;.)&lt;/p&gt;

&lt;h2 id=&quot;page-to-page-notes&quot;&gt;Page-to-page notes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;When loading a program, Ida maps the file into memory in a similar fashion to how the OS does it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When loading a file into Ida, you can choose to interpret the file as raw data. This can be helpful in the case that malware has additional stuff appended to the end of the executable. This extra stuff would normally not be loaded into memory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Jump arrow color key:
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;red&lt;/em&gt;: Jump not taken&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;green&lt;/em&gt;: Jump taken&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;blue&lt;/em&gt;: unconditional jump&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ida provides a &lt;em&gt;Navigation band.&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;Light blue is library code recognized by Ida’s super cool ‘FLIRT’ technology.&lt;/li&gt;
      &lt;li&gt;Red is compiler generated code.&lt;/li&gt;
      &lt;li&gt;Dark blue is user-written code.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">There is a HUGE amount of content to know about IDA, and these notes hardly puts a dent in covering the helpful content.</summary></entry><entry><title type="html">PMA Ch. 4 notes: A Crash Course in x86 Disassembly</title><link href="http://localhost:4000/notes/2018/09/03/ch4_PMA_notes.html" rel="alternate" type="text/html" title="PMA Ch. 4 notes: A Crash Course in x86 Disassembly" /><published>2018-09-03T14:31:00-06:00</published><updated>2018-09-03T14:31:00-06:00</updated><id>http://localhost:4000/notes/2018/09/03/ch4_PMA_notes</id><content type="html" xml:base="http://localhost:4000/notes/2018/09/03/ch4_PMA_notes.html">&lt;h2 id=&quot;chapter-summary-questions&quot;&gt;Chapter summary questions&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In two sentences or less, provide an overview of what this chapter is about.&lt;/p&gt;

    &lt;p&gt;This chapter lays the foundation of assembly and computer architecture required for effective malware analysis.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the three most important takeaways from this chapter?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;How the stack works and how functions utilize it&lt;/li&gt;
      &lt;li&gt;What information is contained in which parts of RAM (see the Computer Architecture subsection below)&lt;/li&gt;
      &lt;li&gt;Which registers do what. I presume that’s known upon reading this section, but just in case it isn’t, this chapter cover sit.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What problems does this chapter address? In other words, why should we care about this chapter?&lt;/p&gt;

    &lt;p&gt;Without this information, one won’t even have a foundation for being able to understand what 90% of malware analysis is about– assembly instructions and how they’re used.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;page-to-page-notes&quot;&gt;Page-to-page notes&lt;/h2&gt;

&lt;h3 id=&quot;levels-of-abstraction&quot;&gt;Levels of Abstraction&lt;/h3&gt;

&lt;p&gt;There are six levels of abstraction in a computer system. From lowest to highest:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Hardware.&lt;/em&gt; This is the actual circuitry of the system.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Microcode.&lt;/em&gt; This is the firmware of the system. It operates &lt;em&gt;only&lt;/em&gt; on the exact circuitry for which it was designed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Machine code.&lt;/em&gt; The machine code level consists of &lt;em&gt;opcodes&lt;/em&gt;, which are hex digits that tell the processor what to do. Machine code is the result of the compilation process.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Low-level languages.&lt;/em&gt; Assembly and the like is what is found here, and is generally accepted as the lowest-level human-readable abstraction level. There are several dialects of assembly, among which include x86, which is what is taught in this book. &lt;strong&gt;Assembly is the highest level language that can be reliably and consistently recovered from machine code when the high level source code is unavailable (as it usually is.)&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;High-level languages.&lt;/em&gt; Things like C, C++, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Interpreted languages.&lt;/em&gt; Languages like Java, C#, Perl, .NET. Interpreted languages are not compiled but are instead translated into &lt;em&gt;bytecode&lt;/em&gt;, which is an intermediate representation specific to the programming language. It executes within an &lt;em&gt;interpreter&lt;/em&gt;, which translates bytecode into executable machine code on the fly at runtime.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;computer-architecture&quot;&gt;Computer Architecture&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;RAM contains the Stack, Heap, Code, and Data of a program.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Data&lt;/em&gt;. Contains the data section, which contain values put in place when a program is initially loaded. These are static values (opposite of dynamic values which are contained within the heap), or they are global values since they’re available to any part of the program.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Code.&lt;/em&gt; Instructions for the CPU are here.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Heap.&lt;/em&gt; Used for dynamic memory during program execution.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Stack.&lt;/em&gt; Used for local variables and parameters for functions, and to help control program flow. More on this later.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Operands&lt;/em&gt; take one of three forms.
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Immediates&lt;/em&gt;: fixed values. Ex: &lt;code class=&quot;highlighter-rouge&quot;&gt;0x42&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Registers&lt;/em&gt;: refer to registers. Self-explanatory. Ex: &lt;code class=&quot;highlighter-rouge&quot;&gt;eax, esp, ah&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Memory addresses&lt;/em&gt;: refer to memory addresses which in turn could point to locations in memory or registers. Ex: &lt;code class=&quot;highlighter-rouge&quot;&gt;[eax]&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Registers&lt;/em&gt; are small amounts of data storage available to the CPU. We have four different kinds of registers.
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;General&lt;/em&gt; registers are used by the CPU during execution.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Segment&lt;/em&gt; registers are used to track sections of memory.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Status flags&lt;/em&gt; are used to make decisions and are modified by certain instructions.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Instruction pointers&lt;/em&gt; point to the next instruction to execute.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;notes-on-specific-assembly-instructions&quot;&gt;Notes on specific assembly instructions&lt;/h3&gt;
&lt;p&gt;The book uses Intel syntax, which follows a &lt;code class=&quot;highlighter-rouge&quot;&gt;dest, src&lt;/code&gt; notation.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;LEA &lt;em&gt;dest, src&lt;/em&gt; is used as a quick way to calculate an effective address. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;lea eax, [ebx + 8]&lt;/code&gt; puts the value specified within ebx, +8, into eax.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SUB will subtract into the destination register.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;MUL and DIV always operate on EAX.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MUL *value*&lt;/code&gt; will calculate EDX:EAX = EAX * value&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DIV *value*&lt;/code&gt; will calculate EDX:EAX (treating the two as a compound register) by value, and store the quotient (division) in eax, and the remainder (modulus) in edx.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;XOR is a common instruction used to zero things out. &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR eax, eax&lt;/code&gt; =&amp;gt; eax is 0 now.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TEST and CMP are used to set flags. They do not affect operands. See p80 for a little table that helps make sense of what cmp sets under what conditions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;The REP family of instructions are used for manipulating data buffers. I won’t bother with understanding these in too much depth at the moment, as it’s something that can be easily looked up when I’m face-to-face with a rep instruction later on. See page 81.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stack-details&quot;&gt;Stack Details&lt;/h3&gt;
&lt;p&gt;It’s very important to know how the stack is used to conduct function calls, as it is frequently abused.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Arguments are &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;ed onto the stack.&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;call [functionName]&lt;/code&gt; occurs. FunctionName is simply a pointer to some code.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; is a compound instruction– that is, it is an instruction that combines two others. In this case, those two instructions are &lt;code class=&quot;highlighter-rouge&quot;&gt;push eip&lt;/code&gt; followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;mov eip, functionName&lt;/code&gt;. In this manner, the return address is saved onto the stack.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Function prologue stuff (i.e. boiler plate stuff) happens now. Space is allocated on the stack for local variables, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ebp&lt;/code&gt; is pushed onto the stack. Pushing &lt;code class=&quot;highlighter-rouge&quot;&gt;ebp&lt;/code&gt; ‘saves the context’ of the stack as it was before the function was called, which is important as we need that context back after the function completes.&lt;/li&gt;
  &lt;li&gt;The function does its work.&lt;/li&gt;
  &lt;li&gt;Now, the stack is restored to the state in which it was before the function was called, via a function epilogue. &lt;code class=&quot;highlighter-rouge&quot;&gt;ebp&lt;/code&gt; is restored to what it was. &lt;code class=&quot;highlighter-rouge&quot;&gt;leave&lt;/code&gt; is often used to restore the stack as &lt;code class=&quot;highlighter-rouge&quot;&gt;leave&lt;/code&gt; does a &lt;code class=&quot;highlighter-rouge&quot;&gt;mov esp, ebp&lt;/code&gt; followed by a &lt;code class=&quot;highlighter-rouge&quot;&gt;pop ebp&lt;/code&gt;, which is all that needs to happen to set the stack back to what it was– as long as things weren’t modified by the function.&lt;/li&gt;
  &lt;li&gt;The function returns by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;ret&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;ret&lt;/code&gt; does a &lt;code class=&quot;highlighter-rouge&quot;&gt;pop eip&lt;/code&gt;, which transfers control back to the calling function.&lt;/li&gt;
  &lt;li&gt;The stack is adjusted to remove arguments that were sent, unless they’ll be sent again later.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Diagrams are great for visualing the stack. Due to fear of copyright stuff, I’ll just tell you that a great diagram can be found on p79.&lt;/p&gt;

&lt;p&gt;Note that the stack grows upward (i.e. as things are pushed onto the stack, memory addresses of ‘higher’ items are lower in value than memory addresses of ‘lower’ items.&lt;/p&gt;

&lt;p&gt;Finally, note that function &lt;em&gt;arguments&lt;/em&gt; are going to be at a positive offset relative to EBP, while &lt;em&gt;local variables&lt;/em&gt; are going to be at a negative offset relative to EBP.&lt;/p&gt;</content><author><name></name></author><summary type="html">Chapter summary questions In two sentences or less, provide an overview of what this chapter is about. This chapter lays the foundation of assembly and computer architecture required for effective malware analysis.</summary></entry><entry><title type="html">PMA Ch.3 Lab: Basic Dynamic Analysis</title><link href="http://localhost:4000/lab_assignment/2018/08/29/PMA_Ch3_Labs.html" rel="alternate" type="text/html" title="PMA Ch.3 Lab: Basic Dynamic Analysis" /><published>2018-08-29T12:31:00-06:00</published><updated>2018-08-29T12:31:00-06:00</updated><id>http://localhost:4000/lab_assignment/2018/08/29/PMA_Ch3_Labs</id><content type="html" xml:base="http://localhost:4000/lab_assignment/2018/08/29/PMA_Ch3_Labs.html">&lt;h2 id=&quot;lab-summary-questions&quot;&gt;Lab summary questions&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Considering malware analysis as a whole, how important is it to a general aspiring analyst to complete this chapter’s exercises?&lt;/p&gt;

    &lt;p&gt;Very important. Applying the dynamic analysis processes described in this chapter and becoming used to the tools discussed within is going to be helpful experience for when it comes to analyze just about any other piece of malware.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What did doing the lab exercises teach that was not gained from reading the chapter?&lt;/p&gt;

    &lt;p&gt;In this case, it was mainly just practice using the tools.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;challenges-encountered-in-the-labs&quot;&gt;Challenges encountered in the labs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Using ProcMon to find imports wasn’t done &lt;em&gt;quite&lt;/em&gt; how the book indicated it would be done– I didn’t have a way to launch “depends.exe” in the options generated from right clicking the malicious process. After consulting a &lt;a href=&quot;https://support.microsoft.com/en-us/help/970920/using-process-explorer-to-list-dlls-running-under-the-outlook-exe-proc&quot;&gt;post from Microsoft on how to view imports using ProcMon&lt;/a&gt;, it was made clear that all I needed to do was go to view -&amp;gt; click show lower pane, and then imports could be viewed in the lower pane for whatever process I had selected.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lab-walkthrough-includes-answers&quot;&gt;Lab Walkthrough (includes answers!)&lt;/h2&gt;

&lt;h3 id=&quot;31&quot;&gt;3.1&lt;/h3&gt;
&lt;p&gt;Analyze the malware found in the file &lt;em&gt;Lab03-01.exe&lt;/em&gt; using basic dynamic analysis tools.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What are this malware’s imports and strings?&lt;/p&gt;

    &lt;p&gt;Imports:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.1.1imports.PNG&quot; alt=&quot;3.1.1imports&quot; title=&quot;imports&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Strings:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.1.1strings.PNG&quot; alt=&quot;3.1.1strings&quot; title=&quot;strings&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Note that ProcExp found that the strings on the image as well as on disk were identical.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the malware’s host-based indicators?&lt;/p&gt;

    &lt;p&gt;It doesn’t create any files. It doesn’t seem to modify keys (for, say, persistence). I don’t see any evident host based indicators.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;This seems weird.&lt;/strong&gt; The file crashes. At first I thought that was part of the operation of the file, but with no strange seeming imports and relatively normal strings and no indicators, the file seemed especially well-behaved. After looking into what the “error” message I recieved meant, I now know that the file doesn’t run well on a 64-bit Windows 7 VM.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.1.2fail1.PNG&quot; alt=&quot;fail1&quot; title=&quot;64-bit Windows 7 runtime error&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;And after reading up a little on &lt;a href=&quot;https://superuser.com/questions/610495/the-application-was-unable-to-start-correctly-0xc0000018-windows-8-x64&quot;&gt;what this cryptic error might have meant&lt;/a&gt;, and after trying the top answer in the question to no avail, I decided I needed to try it in a 32 bit environment.&lt;/p&gt;

    &lt;p&gt;So, I spun up a 32-bit windows VM real quick and ran it again…:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.1.2fail2.PNG&quot; alt=&quot;fail2&quot; title=&quot;32-bit Windows 7 runtime error&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Ugh. That’s probably not normal either. So, I looked into what &lt;a href=&quot;https://jmprsp.wordpress.com/2016/01/28/practical-malware-analysis-basic-dynamic-techniques-lab-3-01/&quot;&gt;someone else did&lt;/a&gt; and discovered an explanation that seemed to hint towards how this particular sample was built to leverage a Windows XP-specific function– one that was changed in Windows 7.&lt;/p&gt;

    &lt;p&gt;No wonder this sample seemed well-behaved on the 64-bit version of Windows 7– it doesn’t do anything. Unfortunately, I don’t currently have access to a Windows XP .iso, so I’m going to have to put this problem on the backburner. In any case, after reading the answers and what jmprsp did, I’m thinking it wouldn’t have been too difficult to identify this malware’s pesky behavior in an environment in which the malware would actually properly run.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are there any useful network-based signatures for this malware? If so, what are they?&lt;/p&gt;

    &lt;p&gt;Strings shows the presence of &lt;code class=&quot;highlighter-rouge&quot;&gt;www.practicalmalwareanalysis.com&lt;/code&gt; but due to previously described problems, a true analysis of this sample could not be completed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;32&quot;&gt;3.2&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;How can you get this malware to install itself?&lt;/p&gt;

    &lt;p&gt;After strictly reading this question, the first thing that comes to mind is we need to use rundll32.exe to run this file, but we need to know what DLL functions should be ran. If we use Ida to check out the exports, we find there exist a few:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.2.1dllexports.PNG&quot; alt=&quot;3.2.1dllexports&quot; /&gt;)&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Install&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;installA&lt;/code&gt; look promising. Let’s try running &lt;code class=&quot;highlighter-rouge&quot;&gt;Install&lt;/code&gt; with rundll32.exe and see what happens.&lt;/p&gt;

    &lt;p&gt;First, I start up Procmon and…&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rundll32.exe Lab03-02.dll, Install&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.2.2fail.PNG&quot; alt=&quot;3.2.2fail.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;UGH. WHY.&lt;/p&gt;

    &lt;p&gt;It doesn’t work on 32 bit versions of Windows 7 either, even when ran as an administrator. It looks like this is another piece of Windows XP-specific malware. Unfortunately, I cannot continue with this sample either. Review &lt;a href=&quot;https://jmprsp.wordpress.com/2016/01/31/practical-malware-analysis-basic-dynamic-techniques-lab-3-02/&quot;&gt;jmprsp’s work here&lt;/a&gt; and move on.&lt;/p&gt;

    &lt;p&gt;We will return to this problem as soon as I hit chapter 5 (i.e. the Ida chapter), and identify the exact problem behind why it won’t run. Maybe it’s something that can be fixed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How would you get this malware to run after installation?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How can you find the process under which this malware is running?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Which filters could you set in order to use procmon to glean information?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the malware’s host-based indicators?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are there any useful network-based signatures for this malware?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;realizations-made-after-reading-the-book-answers&quot;&gt;Realizations made after reading the book answers:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;here&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;33&quot;&gt;3.3&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What do you notice when monitoring this malware with Process Explorer?&lt;/p&gt;

    &lt;p&gt;I notice that I get yet another Windows error. This time, it’s 0xc0000142. Frustrating.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.3.1svchostfail.PNG&quot; alt=&quot;3.3.1svchostfail.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Although, the failure is coming from svchost.exe – NOT Lab03-03.exe. After running it again, I noticed that Lab03-03.exe appears to spawn this svchost.exe and then exits, which leaves svchost.exe a zombie process. I’m not sure what that svchost.exe is trying to do yet. We know it’s failing with error 0xc0000142, and if we look into &lt;a href=&quot;https://answers.microsoft.com/en-us/windows/forum/windows_10-performance-winpc/error-0xc0000142/3da27a75-178c-4de5-b43c-c538e6005540&quot;&gt;what causes this error&lt;/a&gt; we find that it has something to do with system files not existing, which is indicative of another Windows XP vs 7 problem.&lt;/p&gt;

    &lt;p&gt;In either case, however, running the program in a 32 bit environment yielded a different error than when in a 64 bit environment. Upon viewing the procmon logs on the 32-bit version, it looks like svchost, before crashing, successfully completes a &lt;em&gt;lot&lt;/em&gt; of registry querying.&lt;/p&gt;

    &lt;p&gt;Further, if we look at HOW svchost.exe is called, we notice it’s not called in any special way:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.3.2svchostcall.PNG&quot; alt=&quot;3.3.2svchostcall.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Yet, it appears to be querying the entire registry. I don’t think this is svchost.exe’s main function. This smells like process injection, which could be what ends up causing the Windows error when this malware arrives at the functionality that is supposed to come after the registry querying. Further, process injection often works only for specific builds of Windows (i.e. injecting a process in Windows 7 may not work the same way as injecting a process in Windows XP). I think that’s why we receive a runtime error when runnign this in Windows 7.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Can you identify any live memory modifications?&lt;/p&gt;

    &lt;p&gt;If svchost didn’t unexpectedly crash, I would view the process properties from within procexp and compare the strings in the image to the strings on disk, and, as is confirmed by &lt;a href=&quot;https://jmprsp.wordpress.com/2016/01/31/practical-malware-analysis-basic-dynamic-techniques-lab-3-03/&quot;&gt;jmprsp in his post on ch3 lab3&lt;/a&gt;, we would find that they are indeed very different, which demonstrates process injection as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the malware’s host-based indicators?&lt;/p&gt;

    &lt;p&gt;This question would be easier to answer if the program ran correctly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the purpose of this program?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;34&quot;&gt;3.4&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What happens when you run this file?&lt;/p&gt;

    &lt;p&gt;Running the file results in the file’s deleting itself!  (FINALLY, MALWARE THAT RUNS PROPERLY IN A WINDOWS 7 ENVIRONMENT WOOOO).&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.4.1proctree.PNG&quot; alt=&quot;3.4.1proctree.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;The process tree provided by ProcMon (view -&amp;gt; process tree) shows that cmd is spawned by Lab03-04.exe with a delete command for the initial binary. It doesn’t appear to do much more, despite the fact that there is lots of potential functionality, judging from the imported functions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is causing the roadblock in dynamic analysis?&lt;/p&gt;

    &lt;p&gt;If we look at the code using Ida, we see that it calls main passing in command line arguments…&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.4.1callmain.PNG&quot; alt=&quot;3.4.1callmain.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;and that something happens if there is only one argument passed to the program (i.e. if no command line arguments are passed in).&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.4.2main.PNG&quot; alt=&quot;3.4.2main.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Perhaps this is the issue.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are there other ways to run this program?&lt;/p&gt;

    &lt;p&gt;If we running the program on the command line (i.e. cmd.exe) we can easily pass in more arguments. However, without doing a deeper dive into what sorts of arguments it may require/need, we can’t further process what this program does. I suspect we’ll return to this program shortly after the Ida chapter.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Lab summary questions Considering malware analysis as a whole, how important is it to a general aspiring analyst to complete this chapter’s exercises?</summary></entry><entry><title type="html">PMA Ch.3 notes: Basic Dynamic Analysis</title><link href="http://localhost:4000/notes/2018/08/22/ch3_PMA_notes.html" rel="alternate" type="text/html" title="PMA Ch.3 notes: Basic Dynamic Analysis" /><published>2018-08-22T14:31:00-06:00</published><updated>2018-08-22T14:31:00-06:00</updated><id>http://localhost:4000/notes/2018/08/22/ch3_PMA_notes</id><content type="html" xml:base="http://localhost:4000/notes/2018/08/22/ch3_PMA_notes.html">&lt;h2 id=&quot;chapter-summary-questions&quot;&gt;Chapter summary questions&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In two sentences or less, provide an overview of what this chapter is about.&lt;/p&gt;

    &lt;p&gt;This chapter introduces dynamic analysis as well as the main tools used to perform it and how to use those tools. &lt;strong&gt;Dynamic analysis&lt;/strong&gt; is the act of observing a program run, and gathering information about what it’s doing by watching it do its thing in real time while monitoring the state of the machine with several tools.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the three most important takeaways from this chapter?&lt;/p&gt;

    &lt;p&gt;Dynamic Analysis is powerful for analytic reasons, but dangerous, since it involves actually running malware. It’s important to have properly set up a malware analysis environment before doing this form of analysis.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What problems does this chapter address? In other words, why should we care about this chapter?&lt;/p&gt;

    &lt;p&gt;The workflow introduced in this chapter is &lt;em&gt;typically&lt;/em&gt; the same workflow used to analyze most malware samples, and provides overview information to the analyst about what the malware does. It is effectively the second step of the analysis process and it will generally help direct the analyst’s efforts by showing them what they need to look more in depth at.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;terminology-and-keys&quot;&gt;Terminology and Keys&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Dynamic Analysis&lt;/strong&gt; is any examination performed during or after executing malware. It permits viewing of the malware’s true functionality.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Do static analysis first. Dynamic analysis is (obviously) much more dangerous.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sandboxes&lt;/strong&gt; are ($$$$) security mechanisms for running untrusted programs in a safe environment without fear of harming “real” systems.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;They are automated, and often make use of the CVD to check for common vulnerabilities being exploited.&lt;/li&gt;
  &lt;li&gt;They do, however, tend to just run the executable without command line options, which may not mimic the environment in which the malware was designed to execute in.&lt;/li&gt;
  &lt;li&gt;Like virtual machines, sandboxes are detectable and may report an exectuable as not malicious if it senses its in a sandbox and reacts differently than in normal circumstances.&lt;/li&gt;
  &lt;li&gt;Sandboxes can tell you specifics behind what a malware sample does, but it cannot perform overall semantic analysis.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Service Entries key: &lt;code class=&quot;highlighter-rouge&quot;&gt;HKLM\SYSTEM\CurrentControlSet\Services&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Services ran at startup: &lt;code class=&quot;highlighter-rouge&quot;&gt;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;page-to-page-notes&quot;&gt;Page-to-page notes&lt;/h2&gt;

&lt;h3 id=&quot;running-dlls&quot;&gt;Running DLLs&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;rundll32.exe&lt;/em&gt; is what we use to run functions or ordinals from DLL files. Syntax:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\rundll32.exe DLLname, export arguments
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, imagine you open up a file &lt;em&gt;rip.dll&lt;/em&gt; and examine its exports with PEView or with PE Explorer, and you see it has two exports: Install, Uninstall. You can run of these as such:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\rundll32.exe rip.dll, Install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Or if there are functions exported by ordinal (i.e. as an exported function with only an ordinal number), you do this sort of thing:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\rundll32.exe someDll.exe, #5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The pound (#) is important.&lt;/p&gt;

&lt;p&gt;DLLMain() is executed whenever a DLL is loaded, so you can often get information dynamically by forcing the DLL to load using runndll32.exe. Alternatively, a DLL can be turned into an executable by modifying the PE header and changing its extension to force Windows to load the DLL as it would an executable.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Modifying the PE header: wipe the &lt;code class=&quot;highlighter-rouge&quot;&gt;IMAGE_FILE_DLL&lt;/code&gt; (0x2000) flag from teh characteristics field in the &lt;code class=&quot;highlighter-rouge&quot;&gt;IMAGE_FILE_HEADER&lt;/code&gt;. This won’t run imported functions, but it will run the DLLMain() method.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Malware may install itself as a service too, potentially using a legit utility such as the convenient export &lt;code class=&quot;highlighter-rouge&quot;&gt;InstallService&lt;/code&gt; from ipr32x.dll:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\&amp;gt; rundll32 ipr32x.dll,InstallService serviceNameHere
C:\&amp;gt; net start serviceNameHere
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;sc&lt;/code&gt; on cmd to play with services as well.&lt;/p&gt;

&lt;p&gt;(I presume there is a 64 bit version of rundll for Windows but I’ve not looked into what it is at time of writing.)&lt;/p&gt;

&lt;h3 id=&quot;faking-a-network&quot;&gt;Faking a Network&lt;/h3&gt;
&lt;p&gt;If the malware reaches out to an external domain, it’s helpful to fake being that external domain to further watch how the malware behaves. The book discusses using ApateDNS and Netcat on p51, but I’m going to use INetSim on a Remnux box and Wireshark to observe network behavior (see further down for more details on INetSim).&lt;/p&gt;

&lt;h2 id=&quot;tools-discussed-in-this-section&quot;&gt;Tools discussed in this section&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;procmon&lt;/strong&gt; is an advanced, extremely helpful monitoring tool for Windows that provides a way to monitor certain registry, file system, network, process, and thread activity.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It can miss device driver activity of a user-mode component talking to a rootkit via device I/O controls, and can miss certain GUI calls such as &lt;code class=&quot;highlighter-rouge&quot;&gt;SetWindowsHookEx&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Generally, it shouldn’t be used for logging network activity, as it doesn’t work consistently across Microsoft Windows versions.&lt;/li&gt;
  &lt;li&gt;Using procmon: at and around pg44.&lt;/li&gt;
  &lt;li&gt;Filtering is super important with Procmon.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Process Explorer&lt;/strong&gt; is a free utility provided by Microsoft, probably as part of &lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite&quot;&gt;sysinternals&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use it for listing active processes, DLLs loaded by a process, various process properties, and overall system information. It can also be used to kill processes, log out users, and launch/validate processes.&lt;/li&gt;
  &lt;li&gt;It dynamically shows when new processes are created or modified, as well as what created them.&lt;/li&gt;
  &lt;li&gt;You can &lt;em&gt;verify&lt;/em&gt; binaries with it. There’s a verify button on the image tab, and the image tab is found when viewing a process’s properties. The verify button checks to see if the image on disk is the microsoft signed binary.
    &lt;ul&gt;
      &lt;li&gt;This can be used to identify process replacement/injection, since that involves modifying the executable, which’ll screw up the signature of the file.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;There is a strings window in the process properties collection of tabs as well. It can check for strings in the in-memory process as well as the on-disk image. If the strings vary greatly, you know that something fishy is going on.&lt;/li&gt;
  &lt;li&gt;You can use process explorer to launch depends.exe – Dependency Walker – on a running process. Right click a process name and select “Launch Depends.”&lt;/li&gt;
  &lt;li&gt;It can be used to analyze malicious documents by observing processes opened when clicking a malicious document. The image tab will tell you exactly where the malicious payload executed by the document is on disk.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Regshot&lt;/strong&gt; is used to take snapshots of the registry. Take the first shot before running the malware, and take the second shot after. It then tells you of all differences between the two snapshots.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wireshark&lt;/strong&gt; is briefly discussed on page 53.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INetSim&lt;/strong&gt; is free, Linux-based software for simulating common Internet servies. It’s widely accepted as the best tool for providing fake services, allowing you to analyze the network behavior by emulating servies such as HTTP(S), FTP, IRC, DNS, SMTP, and others. See page 55 of the book for a full list.&lt;/p&gt;

&lt;h2 id=&quot;malware-analysis-work-flow&quot;&gt;Malware Analysis Work Flow&lt;/h2&gt;
&lt;p&gt;Typically, you will use many of the tools simultaneously when executing and observing malware. My generic work flow sessions tend to go like this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;If you’re observing network traffic, set up your virtual network (instructions to do this will be provided later).&lt;/li&gt;
  &lt;li&gt;Run procmon but don’t capture events yet.&lt;/li&gt;
  &lt;li&gt;Start process explorer.&lt;/li&gt;
  &lt;li&gt;Start regshot.&lt;/li&gt;
  &lt;li&gt;If you’re observing network business, start Wireshark and INetSim on the remnux box.&lt;/li&gt;
  &lt;li&gt;Take a VMWare Snapshot so you can return to this point multiple times for multiple detonations of the malware.&lt;/li&gt;
  &lt;li&gt;Take the first registry snapshot.&lt;/li&gt;
  &lt;li&gt;Begin capturing procmon events. (regshot is super noisy and doing it outside of the procmon analysis window makes it such that that noise is ignored).&lt;/li&gt;
  &lt;li&gt;Detonate the malware!&lt;/li&gt;
  &lt;li&gt;Stop the capture of events after malware finishes running (or you’re done running it or whatever)&lt;/li&gt;
  &lt;li&gt;Take the second registry snapshot.&lt;/li&gt;
  &lt;li&gt;Analyze.&lt;/li&gt;
  &lt;li&gt;Revert back to the previous VMWare snapshot and do it again making whatever changes you want to make.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The book also provides a solid sample analysis sesh starting on page 57.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">PMA Ch.2 notes: Malware Analysis in Virtual Machines</title><link href="http://localhost:4000/notes/2018/08/22/ch2_PMA_notes.html" rel="alternate" type="text/html" title="PMA Ch.2 notes: Malware Analysis in Virtual Machines" /><published>2018-08-22T14:31:00-06:00</published><updated>2018-08-22T14:31:00-06:00</updated><id>http://localhost:4000/notes/2018/08/22/ch2_PMA_notes</id><content type="html" xml:base="http://localhost:4000/notes/2018/08/22/ch2_PMA_notes.html">&lt;h2 id=&quot;chapter-summary-questions&quot;&gt;Chapter summary questions&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In two sentences or less, provide an overview of what this chapter is about.&lt;/p&gt;

    &lt;p&gt;This short chapter discusses how to create a virtual environment to analyze malware in. It explains details about the author’s preferred tool, VMWare Workstation, and details how to create/configure a virtual machine, including details about virtual networking, snapshotting, using peripheral devices, VMWare’s record/replay feature, and provides discussion on the risks that must be considered when analyzing malware in ANY case.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the three most important takeaways from this chapter?&lt;/p&gt;

    &lt;p&gt;There is always some risk inherent with the field of malware analysis, but using the right tools can help attenuate the risk to an acceptable level.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What problems does this chapter address? In other words, why should we care about this chapter?&lt;/p&gt;

    &lt;p&gt;This chapter provides the key information behind how to set up the analysis environment used in the rest of the book.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;page-to-page-notes&quot;&gt;Page-to-page notes&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Structure of a VM: pg30&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Snapshotting&lt;/em&gt; is the act of saving the state of a VM and being able to revert back to it within seconds. THIS IS WHY VMWARE WORKSTATION IS NECESSARY. Player does not support this feature. Now’s the time when you agree and go buy workstation. :)&lt;/li&gt;
  &lt;li&gt;Configuring virtual networks using services machines such as Remnux: pg33&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;connecting malware to the internet is generally a bad plan. it can:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;spread around&lt;/li&gt;
      &lt;li&gt;Notify the author that it’s on a machine&lt;/li&gt;
      &lt;li&gt;drop more malware&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;etc etc&lt;/p&gt;

        &lt;p&gt;so NEVER connect malware to the internet without first doing some analysis to determine what it might do when it connects. Then, use your best judgement to determine whether or not it’s worth it to connect the malware to the internet.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Malware can detect if it’s running in a virtual machine, and it can behave differently if it is. Of course, at the end of the day, it’s just running instructions, and those can be checked for and modified by the analyst, but it all takes time.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;There is ALWAYS an inherent risk from running malware even with a virtual environment. Good practices can help attenuate the risk, but will never make the risk 0.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tools-discussed-in-this-section&quot;&gt;Tools discussed in this section&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.vmware.com/products/workstation-pro.html&quot;&gt;VMWare Workstation&lt;/a&gt;: potentially the most important piece of software for malware analysis.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Record and replay seemed especially neat and potentially useful. It records &lt;em&gt;every&lt;/em&gt; instruction executed in the process of a recording session. I’m sure there are uses for this.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Chapter summary questions In two sentences or less, provide an overview of what this chapter is about.</summary></entry><entry><title type="html">PMA Ch.1 Labs: Basic Static Analysis</title><link href="http://localhost:4000/lab_assignment/2018/07/31/PMA_Ch1_Labs.html" rel="alternate" type="text/html" title="PMA Ch.1 Labs: Basic Static Analysis" /><published>2018-07-31T14:12:00-06:00</published><updated>2018-07-31T14:12:00-06:00</updated><id>http://localhost:4000/lab_assignment/2018/07/31/PMA_Ch1_Labs</id><content type="html" xml:base="http://localhost:4000/lab_assignment/2018/07/31/PMA_Ch1_Labs.html">&lt;p&gt;In this category of posts, I’ll be detailing how I go about answering the end-of-chapter lab questions. There ARE going to be spoilers in the lab towards the end of the post (but I will clearly mark where the spoilers begin).&lt;/p&gt;

&lt;p&gt;I’ll also answer the following general questions in an attempt to keep the big picture of the assignments in mind:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Considering malware analysis as a whole, how important is it to a general aspiring analyst to complete this chapter’s exercises?&lt;/li&gt;
  &lt;li&gt;What did doing the lab exercises teach that was not gained from reading the chapter?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;lab-summary-questions&quot;&gt;Lab Summary questions&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Considering malware analysis as a whole, how important is it to a general aspiring analyst to complete this chapter’s exercises?&lt;/p&gt;

    &lt;p&gt;Super important! Static analysis is one of those things that seems easy and straightforward, but ends up being trickier to conduct than expected (for me, at least), due to the fact that I find myself questioning if the information I find is legit or planted.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What did doing the lab exercises teach that was not gained from reading the chapter?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Look &lt;strong&gt;very&lt;/strong&gt; carefully at the strings of the file– specifically at the names of .dll files!&lt;/li&gt;
      &lt;li&gt;Modification time and compilation time are definitely not the same thing. Compilation time can be found by putting the file into PEView and going to IMAGE_NT_HEADERS -&amp;gt; IMAGE_FILE_HEADER -&amp;gt; Time Date Stamp.&lt;/li&gt;
      &lt;li&gt;Virtual vs. raw sizes, identifiable using PEiD (at least for 32 bit exes) can be an indicator of packing. Per this &lt;a href=&quot;http://www.asmcommunity.net/forums/topic/?id=29605&quot;&gt;post&lt;/a&gt;:
        &lt;ul&gt;
          &lt;li&gt;Raw size: exactly the size of the section’s data &lt;em&gt;in the file&lt;/em&gt;&lt;/li&gt;
          &lt;li&gt;Virtual size: The size of the section &lt;em&gt;in memory&lt;/em&gt;
 So it makes sense that, if the section is larger in memory, something is unpacking into that section. Usually, the virtual size is smaller than the raw size.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;It seems evident now, but LoadResource, FindResource, and SizeOfResource functions imply the existence of something that ResourceHacker can help extract. As such, look around with ResourceHacker if you see these functions in the import list.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;challenges-encountered-in-the-labs&quot;&gt;Challenges Encountered in the labs&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;I wasn’t sure how to find the compilation time and wasn’t sure of if the modification time sufficed. The answer to this was made clear after checking the answers in the back of the book.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;lab-walkthrough-includes-answers&quot;&gt;Lab Walkthrough (includes answers!)&lt;/h2&gt;

&lt;h3 id=&quot;11&quot;&gt;1.1&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Upload to VT. Does the file match any existing antivirus signatures?&lt;/p&gt;

    &lt;p&gt;Indeed!&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch1_sc/1.1.1dll.PNG&quot; alt=&quot;1.1.1dll&quot; title=&quot;yee&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch1_sc/1.1.1exe.PNG&quot; alt=&quot;1.1.1exe&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When were these files compiled?&lt;/p&gt;

    &lt;p&gt;Not positive on how to find the exact date using a tool, but just viewing file properties and looking at the “last modified” entry gives the right answer for the .exe. Alternatively, this info is also provided by CFFExplorer.&lt;/p&gt;

    &lt;p&gt;After reading answers: see question 2 of the above section&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are there any indicators that these files are packed or obfuscated? If so, what are the indicators?&lt;/p&gt;

    &lt;p&gt;I argue no:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;The .exe and .dll disassemble successfully in IDA Demo&lt;/li&gt;
      &lt;li&gt;There are several imports identifiable by CFFExplorer which would otherwise be obfuscated &lt;img src=&quot;/files/ch1_sc/1.1.3dll.PNG&quot; alt=&quot;1.1.3dll&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do the imports hint at what the malware does?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Lab1.dll:
        &lt;ul&gt;
          &lt;li&gt;CreateProcess indicates it runs something.&lt;/li&gt;
          &lt;li&gt;from the book: WS2_32.dll provides network functions. So perhaps it’s exfiltrating stuff-n-things&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Lab1.exe:
        &lt;ul&gt;
          &lt;li&gt;CreateFileA/FindFileA: maybe it’s creating a log file, or checking for its own existence, or searching for specific files on a system (like SAM files)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Any other host-based indicators?&lt;/p&gt;

    &lt;p&gt;Running strings shows that the .exe has hard-coded within it “WARNING_THIS_WILL_DESTROY_YOUR_MACHINE” which can be easily grepped for.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What network-based indicators could be used to find this malware on infected machines?&lt;/p&gt;

    &lt;p&gt;Running strings on the .dll yields an IP address: 127.26.152.13. So look for traffic going to that IP address&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Guess as to the purpose of the files:&lt;/p&gt;

    &lt;p&gt;Search for certain files (and/or create them) and exfil them to an external site. My guess is it’s a keylogger or it’s seeking password files or something of the like.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;after-reading-the-book&quot;&gt;After reading the book:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Ahh, the .exe has a string “kerne132.dll”… ‘1’… didn’t notice that at first. Perfect host-based indicator.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;12&quot;&gt;1.2&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Existing antivirus definitions?&lt;/p&gt;

    &lt;p&gt;Absolutely: 43/66 say it’s malicious.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Obfuscation signs?&lt;/p&gt;

    &lt;p&gt;At a glance– some imports are clearly visible and are more in quantity than for typical packed malware.&lt;/p&gt;

    &lt;p&gt;However, Ida claims the imports section was destroyed. I trust Ida more than CFFExplorer since Ida costs like $2000.&lt;/p&gt;

    &lt;p&gt;Looking at strings from within Ida indicates a section called UPX1. UPX is a packer. Obfuscated it is!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do imports provide any juicy knowledge?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;GetProcAddressA and VirtualAlloc suggest this might be doing process injection.&lt;/li&gt;
      &lt;li&gt;CreateService suggests the malware establishes persistence.&lt;/li&gt;
      &lt;li&gt;InternetOpenA suggests the program talks out somewhere.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Indicators!&lt;/p&gt;

    &lt;p&gt;First, I unpacked the file using CFFExplorer and then put it back into Ida to discover, with Ida’s strings utility:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Host-based: strings shows “MalService” in our presence, and that string is passed as a parameter to CreateService: &lt;img src=&quot;/files/ch1_sc/1.2.4malservice.PNG&quot; alt=&quot;malservice&quot; /&gt; This would be a great indicator (albeit not reflective of what real malware might actually do (probably)). Further, there is a strange string “HGL345” used as a parameter to CreateMutex, which suggests if a mutex named HGL345 is on the system, we know this malware probably ran. &lt;img src=&quot;/files/ch1_sc/1.2.4HGL345.PNG&quot; alt=&quot;HGL345&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Network-based: strings yet again comes in clutch to show the presence of “http://malwareanalysisbook.com”.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;after-reading-the-book-1&quot;&gt;After reading the book:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;PEiD can be used to identify virtual vs. raw sizes of sections in memory. Therefore, a raw size of 0 but a virtual size of &amp;gt;0 is strong evidence of shenanigans. &lt;img src=&quot;/files/ch1_sc/1.2.4peid.PNG&quot; alt=&quot;peid&quot; title=&quot;Raw size: 0; yet virtual size=0x4000? HMMMMMMM&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;13&quot;&gt;1.3&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;VirusTotal it up.&lt;/p&gt;

    &lt;p&gt;55/66 claim EVIL (at this point, duh). Also, they say it’s packed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Obfuscations?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;For starters, VT claims it’s packed (i.e. a lot of the warnings say “Packer.FSG.A”).&lt;/li&gt;
      &lt;li&gt;Secondly, the ONLY two imports that exist within the file are “LoadLibraryA” and “GetProcAddress” which are the two imports associated with unpacking an executable.&lt;/li&gt;
      &lt;li&gt;Moreover, we have sections identified by PEiD as having a raw size of 0 and a virtual size of larger. It’s definitely packed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Imports hinting at functionality?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;can’t really answer without unpacking&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;indicators?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;can’t really answer without unpacking&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;14&quot;&gt;1.4&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;VT?
 53/67&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Obfuscations?&lt;/p&gt;

    &lt;p&gt;Ida disassembled it just fine. It has lots of imports. That’s reason enough for me to believe it’s not obfuscated.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Program compilation date?&lt;/p&gt;

    &lt;p&gt;PEView tells us the compilation date is 8/30/2019, which is BS since it isn’t 2019. Clearly this is spoofed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Imports hinting as to functionality?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;GetProcAddress/LoadLibraryA: searching for external code to run&lt;/li&gt;
      &lt;li&gt;CreateFile/MoveFile/WriteFile: It’s got the ability to create and write files. Keylogger? Reverse shell?&lt;/li&gt;
      &lt;li&gt;CreateRemoteThread: has ability to execute code in other programs. Process injection?&lt;/li&gt;
      &lt;li&gt;LookupPrivilegeValue: looking to see what permissions its running with perhaps?
 All this, combined with the antivirus vendor tags that say “backdoor”, tell me this is probably a backdoor into a machine that will give an adversary control.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;host/network based indicators?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Ida Strings: \system32\wupdmgr.exe is in there, which suggests this malware writes or modifies a file at that location with that name. Same with \winup.exe (which, &lt;a href=&quot;https://www.bleepingcomputer.com/startups/winup.exe-18972.html&quot;&gt;according to bleepingcomputer&lt;/a&gt;, is BAD and EVIL!&lt;/li&gt;
      &lt;li&gt;No clue WHY Ida doesn’t show ALL the strings, but it doesn’t. Strings.exe found the string “http://practicalmalwareanalysis.com/updater.exe” in the program. This may be a host-based AND network-based indicator!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;one resource in the resource section. Use ResourceHacker to examine it, and then to extract it. What does the resource tell us?&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch1_sc/1.4.6resource.PNG&quot; alt=&quot;resource&quot; /&gt; 
 This appears to be another executable file. Saving it and submitting the hash resulted in interestingness:
 &lt;img src=&quot;/files/ch1_sc/1.4.6resourceVT.PNG&quot; alt=&quot;resource2&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Cool– we get TWO malware samples for the price of ONE! My guess is that this sample drops a second executable and names it one of the above things (perhaps winup.exe).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The book tells us that we can use Resource Hacker to save just the resource. “Action -&amp;gt; save resource as binary file” takes care of that.&lt;/p&gt;

&lt;h6 id=&quot;la-ur-18-27643&quot;&gt;LA-UR-18-27643&lt;/h6&gt;</content><author><name></name></author><summary type="html">In this category of posts, I’ll be detailing how I go about answering the end-of-chapter lab questions. There ARE going to be spoilers in the lab towards the end of the post (but I will clearly mark where the spoilers begin).</summary></entry><entry><title type="html">PMA Ch.1: Basic Static Analysis Techniques</title><link href="http://localhost:4000/notes/2018/07/31/ch1_PMA_notes.html" rel="alternate" type="text/html" title="PMA Ch.1: Basic Static Analysis Techniques" /><published>2018-07-31T14:11:00-06:00</published><updated>2018-07-31T14:11:00-06:00</updated><id>http://localhost:4000/notes/2018/07/31/ch1_PMA_notes</id><content type="html" xml:base="http://localhost:4000/notes/2018/07/31/ch1_PMA_notes.html">&lt;p&gt;As I walk through the Practical Malware Analysis book, I’ll be doing two posts per studied chapter: one that acts as a brief overview of what I think is the most helpful content from the chapter, and one that walks through my analysis of the lab assignments.&lt;/p&gt;

&lt;p&gt;In addition to including technical details inscribed within the chapter, I’ll be answering the following questions in an attempt to keep in mind the big picture of the chapter.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In two sentences or less, provide an overview of what this chapter is about.&lt;/li&gt;
  &lt;li&gt;What are the three most important takeaways from this chapter?&lt;/li&gt;
  &lt;li&gt;What problems does this chapter address? In other words, why should we care about this chapter?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s get started.&lt;/p&gt;

&lt;h2 id=&quot;chapter-summary-questions&quot;&gt;Chapter summary questions&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In two sentences or less, provide an overview of what this chapter is about.&lt;/p&gt;

    &lt;p&gt;This chapter discusses basic static analysis of executable files and provides a slew of tools used to do so. Static analysis of a file is analysis that does NOT involve running the file, such as by examining the header of the file and looking for strings contained within.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the three most important takeaways from this chapter?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Static analysis is one tool in the toolbox for identifying malware, but there are ways to make static analysis virtually useless.&lt;/li&gt;
      &lt;li&gt;Section names are merely convention. They can be renamed to be misleading.&lt;/li&gt;
      &lt;li&gt;There are three kinds of linking: &lt;em&gt;static&lt;/em&gt;, &lt;em&gt;runtime&lt;/em&gt;, and &lt;em&gt;dynamic&lt;/em&gt;. Malware more frequently makes use of runtime linking due to how it’s easier to conceal runtime behavior using this version.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What problems does this chapter address? In other words, why should we care about this chapter?&lt;/p&gt;

    &lt;p&gt;Static analysis is the first step in analyzing any executable, and you should do it. It can provide clues that will pave the way for productive dynamic analysis.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;page-to-page-notes&quot;&gt;Page-to-page notes&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Ascii strings use 1 byte per char; Unicode strings use two per char.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Packed and otherwise obfuscated code will usually include library functions “GetProcAddress” and “LoadLibrary” as those two are typically used to decrypt/deobfuscate other functions. &lt;strong&gt;These two functions can be used to access any function in any library on the system.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Linking is used to connect code in libraries to an executable. There are three kinds of linking:
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Static:&lt;/em&gt; the library code is copied ver batim into the executable. Common in malware due to how it can be obfuscated; rare in goodware as there’s little purpose to do it other than to hide meaning of a program.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Runtime:&lt;/em&gt; Library code is searched for only when needed within a program, as opposed to at the beginning of execution of a program (see dynamic linking). It’s popular with malware writers as the imports can be concealed at the beginning of the program’s execution and revealed at some point in the runtie of the program, making static analysis harder.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Dynamic:&lt;/em&gt; The host OS searches for necessary libraries only when the program is loaded. When executing library code, the code executed is within the library’s space (i.e. it’s not copied somewhere and executed there).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Appendix A contains lots of DLLs of high interest to malware analysts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;a-little-about-the-pe-file-format&quot;&gt;A little about the PE file format&lt;/h4&gt;

&lt;p&gt;Consists of a header followed by a series of sections:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;.text&lt;/strong&gt;: Contains instructions that the CPU executes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;.rdata&lt;/strong&gt;: typically contains import and export information, which is the same info available from Dependency Walker (a tool) and PEViEW (a slightly out of date tool).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;.data&lt;/strong&gt;: Contains program’s global data, accessable from anywhere in the program.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;.rsrc&lt;/strong&gt;: includes resources used by the executable that are not ocnsidered part of the executable (such as icons, images, menus, and strings). Strings are usually (but not necessarily) stored here for multilanguage support.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These section names are convention; Windows doesn’t require them to be labeled as above. It determines what section is what based on info in the PE header.&lt;/p&gt;

&lt;h2 id=&quot;tools-discussed-in-this-section&quot;&gt;Tools discussed in this section&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://dependencywalker.com/&quot;&gt;Dependency Walker&lt;/a&gt; is a free utility that scans Windows executables and builds a hierarchical tree diagram of all dependent modules. 
P16 discusses a bit about how to use it.&lt;/p&gt;

&lt;p&gt;PeID: support was discontinued in 2011, but it is still helpful for detecting packed files.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wjradburn.com/software/&quot;&gt;PEview&lt;/a&gt;: used to view executable file metadata (i.e. information in the headers of an executable).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://angusj.com/&quot;&gt;Resource Hacker&lt;/a&gt;: browses the .rsrc section of an executable. P25 discusses usage of this tool. It also enables one to extract embedded files from within executable files.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.smidgeonsoft.prohosting.com/pebrowse-pro-file-viewer.html&quot;&gt;PEBrowse Professional&lt;/a&gt; is similar to PEview and allows you to look at the bytes from each section. It does a good job of presenting info from the resource (.rsrc) section.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://heaventools.com/&quot;&gt;PE Explorer&lt;/a&gt; has a rich GUI that allows one to navigate through the various parts of a PE file. It permits editing files, too. RIP if you don’t have money to pay for it, though.&lt;/p&gt;

&lt;h2 id=&quot;questions-encountered-and-answers-if-found&quot;&gt;Questions encountered (and answers, if found)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Ascii  representation of “BAD”:&lt;/em&gt;
0x42 0x41 0x44 0x00&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Unicode representation of “BAD”:&lt;/em&gt;
0x42 0x00 0x41 0x00 0x44 0x00 0x00 0x00&lt;/p&gt;

&lt;p&gt;What are the extra null terminators after each character typically used for?&lt;/p&gt;

&lt;h6 id=&quot;la-ur-18-27643&quot;&gt;LA-UR-18-27643&lt;/h6&gt;</content><author><name></name></author><summary type="html">As I walk through the Practical Malware Analysis book, I’ll be doing two posts per studied chapter: one that acts as a brief overview of what I think is the most helpful content from the chapter, and one that walks through my analysis of the lab assignments.</summary></entry></feed>