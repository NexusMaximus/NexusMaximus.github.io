<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-09-04T16:26:00-06:00</updated><id>http://localhost:4000/</id><title type="html">Kyle the (Aspiring) Reverser</title><subtitle>A home for a slew of miscellaneous technical (or not) blogs I write in the process of completing my Masters thesis.</subtitle><entry><title type="html">PMA Ch. 4 notes: A Crash Course in x86 Disassembly</title><link href="http://localhost:4000/notes/2018/09/03/ch4_PMA_notes.html" rel="alternate" type="text/html" title="PMA Ch. 4 notes: A Crash Course in x86 Disassembly" /><published>2018-09-03T14:31:00-06:00</published><updated>2018-09-03T14:31:00-06:00</updated><id>http://localhost:4000/notes/2018/09/03/ch4_PMA_notes</id><content type="html" xml:base="http://localhost:4000/notes/2018/09/03/ch4_PMA_notes.html">&lt;h2 id=&quot;chapter-summary-questions&quot;&gt;Chapter summary questions&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In two sentences or less, provide an overview of what this chapter is about.&lt;/p&gt;

    &lt;p&gt;This chapter lays the foundation of assembly and computer architecture required for effective malware analysis.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the three most important takeaways from this chapter?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;How the stack works and how functions utilize it&lt;/li&gt;
      &lt;li&gt;What information is contained in which parts of RAM (see the Computer Architecture subsection below)&lt;/li&gt;
      &lt;li&gt;Which registers do what. I presume that’s known upon reading this section, but just in case it isn’t, this chapter cover sit.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What problems does this chapter address? In other words, why should we care about this chapter?&lt;/p&gt;

    &lt;p&gt;Without this information, one won’t even have a foundation for being able to understand what 90% of malware analysis is about– assembly instructions and how they’re used.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;page-to-page-notes&quot;&gt;Page-to-page notes&lt;/h2&gt;

&lt;h3 id=&quot;levels-of-abstraction&quot;&gt;Levels of Abstraction&lt;/h3&gt;

&lt;p&gt;There are six levels of abstraction in a computer system. From lowest to highest:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Hardware.&lt;/em&gt; This is the actual circuitry of the system.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Microcode.&lt;/em&gt; This is the firmware of the system. It operates &lt;em&gt;only&lt;/em&gt; on the exact circuitry for which it was designed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Machine code.&lt;/em&gt; The machine code level consists of &lt;em&gt;opcodes&lt;/em&gt;, which are hex digits that tell the processor what to do. Machine code is the result of the compilation process.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Low-level languages.&lt;/em&gt; Assembly and the like is what is found here, and is generally accepted as the lowest-level human-readable abstraction level. There are several dialects of assembly, among which include x86, which is what is taught in this book. &lt;strong&gt;Assembly is the highest level language that can be reliably and consistently recovered from machine code when the high level source code is unavailable (as it usually is.)&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;High-level languages.&lt;/em&gt; Things like C, C++, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Interpreted languages.&lt;/em&gt; Languages like Java, C#, Perl, .NET. Interpreted languages are not compiled but are instead translated into &lt;em&gt;bytecode&lt;/em&gt;, which is an intermediate representation specific to the programming language. It executes within an &lt;em&gt;interpreter&lt;/em&gt;, which translates bytecode into executable machine code on the fly at runtime.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;computer-architecture&quot;&gt;Computer Architecture&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;RAM contains the Stack, Heap, Code, and Data of a program.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Data&lt;/em&gt;. Contains the data section, which contain values put in place when a program is initially loaded. These are static values (opposite of dynamic values which are contained within the heap), or they are global values since they’re available to any part of the program.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Code.&lt;/em&gt; Instructions for the CPU are here.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Heap.&lt;/em&gt; Used for dynamic memory during program execution.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Stack.&lt;/em&gt; Used for local variables and parameters for functions, and to help control program flow. More on this later.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Operands&lt;/em&gt; take one of three forms.
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Immediates&lt;/em&gt;: fixed values. Ex: &lt;code class=&quot;highlighter-rouge&quot;&gt;0x42&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Registers&lt;/em&gt;: refer to registers. Self-explanatory. Ex: &lt;code class=&quot;highlighter-rouge&quot;&gt;eax, esp, ah&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Memory addresses&lt;/em&gt;: refer to memory addresses which in turn could point to locations in memory or registers. Ex: &lt;code class=&quot;highlighter-rouge&quot;&gt;[eax]&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Registers&lt;/em&gt; are small amounts of data storage available to the CPU. We have four different kinds of registers.
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;General&lt;/em&gt; registers are used by the CPU during execution.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Segment&lt;/em&gt; registers are used to track sections of memory.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Status flags&lt;/em&gt; are used to make decisions and are modified by certain instructions.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Instruction pointers&lt;/em&gt; point to the next instruction to execute.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;notes-on-specific-assembly-instructions&quot;&gt;Notes on specific assembly instructions&lt;/h3&gt;
&lt;p&gt;The book uses Intel syntax, which follows a &lt;code class=&quot;highlighter-rouge&quot;&gt;dest, src&lt;/code&gt; notation.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;LEA &lt;em&gt;dest, src&lt;/em&gt; is used as a quick way to calculate an effective address. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;lea eax, [ebx + 8]&lt;/code&gt; puts the value specified within ebx, +8, into eax.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SUB will subtract into the destination register.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;MUL and DIV always operate on EAX.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MUL *value*&lt;/code&gt; will calculate EDX:EAX = EAX * value&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DIV *value*&lt;/code&gt; will calculate EDX:EAX (treating the two as a compound register) by value, and store the quotient (division) in eax, and the remainder (modulus) in edx.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;XOR is a common instruction used to zero things out. &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR eax, eax&lt;/code&gt; =&amp;gt; eax is 0 now.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TEST and CMP are used to set flags. They do not affect operands. See p80 for a little table that helps make sense of what cmp sets under what conditions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;The REP family of instructions are used for manipulating data buffers. I won’t bother with understanding these in too much depth at the moment, as it’s something that can be easily looked up when I’m face-to-face with a rep instruction later on. See page 81.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stack-details&quot;&gt;Stack Details&lt;/h3&gt;
&lt;p&gt;It’s very important to know how the stack is used to conduct function calls, as it is frequently abused.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Arguments are &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;ed onto the stack.&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;call [functionName]&lt;/code&gt; occurs. FunctionName is simply a pointer to some code.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; is a compound instruction– that is, it is an instruction that combines two others. In this case, those two instructions are &lt;code class=&quot;highlighter-rouge&quot;&gt;push eip&lt;/code&gt; followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;mov eip, functionName&lt;/code&gt;. In this manner, the return address is saved onto the stack.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Function prologue stuff (i.e. boiler plate stuff) happens now. Space is allocated on the stack for local variables, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ebp&lt;/code&gt; is pushed onto the stack. Pushing &lt;code class=&quot;highlighter-rouge&quot;&gt;ebp&lt;/code&gt; ‘saves the context’ of the stack as it was before the function was called, which is important as we need that context back after the function completes.&lt;/li&gt;
  &lt;li&gt;The function does its work.&lt;/li&gt;
  &lt;li&gt;Now, the stack is restored to the state in which it was before the function was called, via a function epilogue. &lt;code class=&quot;highlighter-rouge&quot;&gt;ebp&lt;/code&gt; is restored to what it was. &lt;code class=&quot;highlighter-rouge&quot;&gt;leave&lt;/code&gt; is often used to restore the stack as &lt;code class=&quot;highlighter-rouge&quot;&gt;leave&lt;/code&gt; does a &lt;code class=&quot;highlighter-rouge&quot;&gt;mov esp, ebp&lt;/code&gt; followed by a &lt;code class=&quot;highlighter-rouge&quot;&gt;pop ebp&lt;/code&gt;, which is all that needs to happen to set the stack back to what it was– as long as things weren’t modified by the function.&lt;/li&gt;
  &lt;li&gt;The function returns by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;ret&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;ret&lt;/code&gt; does a &lt;code class=&quot;highlighter-rouge&quot;&gt;pop eip&lt;/code&gt;, which transfers control back to the calling function.&lt;/li&gt;
  &lt;li&gt;The stack is adjusted to remove arguments that were sent, unless they’ll be sent again later.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Diagrams are great for visualing the stack. Due to fear of copyright stuff, I’ll just tell you that a great diagram can be found on p79.&lt;/p&gt;

&lt;p&gt;Note that the stack grows upward (i.e. as things are pushed onto the stack, memory addresses of ‘higher’ items are lower in value than memory addresses of ‘lower’ items.&lt;/p&gt;</content><author><name></name></author><summary type="html">Chapter summary questions In two sentences or less, provide an overview of what this chapter is about. This chapter lays the foundation of assembly and computer architecture required for effective malware analysis.</summary></entry><entry><title type="html">PMA Ch.3 Lab: Basic Dynamic Analysis</title><link href="http://localhost:4000/lab_assignment/2018/08/29/PMA_Ch3_Labs.html" rel="alternate" type="text/html" title="PMA Ch.3 Lab: Basic Dynamic Analysis" /><published>2018-08-29T12:31:00-06:00</published><updated>2018-08-29T12:31:00-06:00</updated><id>http://localhost:4000/lab_assignment/2018/08/29/PMA_Ch3_Labs</id><content type="html" xml:base="http://localhost:4000/lab_assignment/2018/08/29/PMA_Ch3_Labs.html">&lt;h2 id=&quot;lab-summary-questions&quot;&gt;Lab summary questions&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Considering malware analysis as a whole, how important is it to a general aspiring analyst to complete this chapter’s exercises?&lt;/p&gt;

    &lt;p&gt;Very important. Applying the dynamic analysis processes described in this chapter and becoming used to the tools discussed within is going to be helpful experience for when it comes to analyze just about any other piece of malware.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What did doing the lab exercises teach that was not gained from reading the chapter?&lt;/p&gt;

    &lt;p&gt;In this case, it was mainly just practice using the tools.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;challenges-encountered-in-the-labs&quot;&gt;Challenges encountered in the labs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Using ProcMon to find imports wasn’t done &lt;em&gt;quite&lt;/em&gt; how the book indicated it would be done– I didn’t have a way to launch “depends.exe” in the options generated from right clicking the malicious process. After consulting a &lt;a href=&quot;https://support.microsoft.com/en-us/help/970920/using-process-explorer-to-list-dlls-running-under-the-outlook-exe-proc&quot;&gt;post from Microsoft on how to view imports using ProcMon&lt;/a&gt;, it was made clear that all I needed to do was go to view -&amp;gt; click show lower pane, and then imports could be viewed in the lower pane for whatever process I had selected.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lab-walkthrough-includes-answers&quot;&gt;Lab Walkthrough (includes answers!)&lt;/h2&gt;

&lt;h3 id=&quot;31&quot;&gt;3.1&lt;/h3&gt;
&lt;p&gt;Analyze the malware found in the file &lt;em&gt;Lab03-01.exe&lt;/em&gt; using basic dynamic analysis tools.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What are this malware’s imports and strings?&lt;/p&gt;

    &lt;p&gt;Imports:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.1.1imports.PNG&quot; alt=&quot;3.1.1imports&quot; title=&quot;imports&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Strings:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.1.1strings.PNG&quot; alt=&quot;3.1.1strings&quot; title=&quot;strings&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Note that ProcExp found that the strings on the image as well as on disk were identical.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the malware’s host-based indicators?&lt;/p&gt;

    &lt;p&gt;It doesn’t create any files. It doesn’t seem to modify keys (for, say, persistence). I don’t see any evident host based indicators.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;This seems weird.&lt;/strong&gt; The file crashes. At first I thought that was part of the operation of the file, but with no strange seeming imports and relatively normal strings and no indicators, the file seemed especially well-behaved. After looking into what the “error” message I recieved meant, I now know that the file doesn’t run well on a 64-bit Windows 7 VM.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.1.2fail1.PNG&quot; alt=&quot;fail1&quot; title=&quot;64-bit Windows 7 runtime error&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;And after reading up a little on &lt;a href=&quot;https://superuser.com/questions/610495/the-application-was-unable-to-start-correctly-0xc0000018-windows-8-x64&quot;&gt;what this cryptic error might have meant&lt;/a&gt;, and after trying the top answer in the question to no avail, I decided I needed to try it in a 32 bit environment.&lt;/p&gt;

    &lt;p&gt;So, I spun up a 32-bit windows VM real quick and ran it again…:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.1.2fail2.PNG&quot; alt=&quot;fail2&quot; title=&quot;32-bit Windows 7 runtime error&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Ugh. That’s probably not normal either. So, I looked into what &lt;a href=&quot;https://jmprsp.wordpress.com/2016/01/28/practical-malware-analysis-basic-dynamic-techniques-lab-3-01/&quot;&gt;someone else did&lt;/a&gt; and discovered an explanation that seemed to hint towards how this particular sample was built to leverage a Windows XP-specific function– one that was changed in Windows 7.&lt;/p&gt;

    &lt;p&gt;No wonder this sample seemed well-behaved on the 64-bit version of Windows 7– it doesn’t do anything. Unfortunately, I don’t currently have access to a Windows XP .iso, so I’m going to have to put this problem on the backburner. In any case, after reading the answers and what jmprsp did, I’m thinking it wouldn’t have been too difficult to identify this malware’s pesky behavior in an environment in which the malware would actually properly run.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are there any useful network-based signatures for this malware? If so, what are they?&lt;/p&gt;

    &lt;p&gt;Strings shows the presence of &lt;code class=&quot;highlighter-rouge&quot;&gt;www.practicalmalwareanalysis.com&lt;/code&gt; but due to previously described problems, a true analysis of this sample could not be completed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;32&quot;&gt;3.2&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;How can you get this malware to install itself?&lt;/p&gt;

    &lt;p&gt;After strictly reading this question, the first thing that comes to mind is we need to use rundll32.exe to run this file, but we need to know what DLL functions should be ran. If we use Ida to check out the exports, we find there exist a few:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.2.1dllexports.PNG&quot; alt=&quot;3.2.1dllexports&quot; /&gt;)&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Install&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;installA&lt;/code&gt; look promising. Let’s try running &lt;code class=&quot;highlighter-rouge&quot;&gt;Install&lt;/code&gt; with rundll32.exe and see what happens.&lt;/p&gt;

    &lt;p&gt;First, I start up Procmon and…&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rundll32.exe Lab03-02.dll, Install&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.2.2fail.PNG&quot; alt=&quot;3.2.2fail.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;UGH. WHY.&lt;/p&gt;

    &lt;p&gt;It doesn’t work on 32 bit versions of Windows 7 either, even when ran as an administrator. It looks like this is another piece of Windows XP-specific malware. Unfortunately, I cannot continue with this sample either. Review &lt;a href=&quot;https://jmprsp.wordpress.com/2016/01/31/practical-malware-analysis-basic-dynamic-techniques-lab-3-02/&quot;&gt;jmprsp’s work here&lt;/a&gt; and move on.&lt;/p&gt;

    &lt;p&gt;We will return to this problem as soon as I hit chapter 5 (i.e. the Ida chapter), and identify the exact problem behind why it won’t run. Maybe it’s something that can be fixed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How would you get this malware to run after installation?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How can you find the process under which this malware is running?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Which filters could you set in order to use procmon to glean information?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the malware’s host-based indicators?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are there any useful network-based signatures for this malware?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;realizations-made-after-reading-the-book-answers&quot;&gt;Realizations made after reading the book answers:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;here&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;33&quot;&gt;3.3&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What do you notice when monitoring this malware with Process Explorer?&lt;/p&gt;

    &lt;p&gt;I notice that I get yet another Windows error. This time, it’s 0xc0000142. Frustrating.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.3.1svchostfail.PNG&quot; alt=&quot;3.3.1svchostfail.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Although, the failure is coming from svchost.exe – NOT Lab03-03.exe. After running it again, I noticed that Lab03-03.exe appears to spawn this svchost.exe and then exits, which leaves svchost.exe a zombie process. I’m not sure what that svchost.exe is trying to do yet. We know it’s failing with error 0xc0000142, and if we look into &lt;a href=&quot;https://answers.microsoft.com/en-us/windows/forum/windows_10-performance-winpc/error-0xc0000142/3da27a75-178c-4de5-b43c-c538e6005540&quot;&gt;what causes this error&lt;/a&gt; we find that it has something to do with system files not existing, which is indicative of another Windows XP vs 7 problem.&lt;/p&gt;

    &lt;p&gt;In either case, however, running the program in a 32 bit environment yielded a different error than when in a 64 bit environment. Upon viewing the procmon logs on the 32-bit version, it looks like svchost, before crashing, successfully completes a &lt;em&gt;lot&lt;/em&gt; of registry querying.&lt;/p&gt;

    &lt;p&gt;Further, if we look at HOW svchost.exe is called, we notice it’s not called in any special way:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.3.2svchostcall.PNG&quot; alt=&quot;3.3.2svchostcall.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Yet, it appears to be querying the entire registry. I don’t think this is svchost.exe’s main function. This smells like process injection, which could be what ends up causing the Windows error when this malware arrives at the functionality that is supposed to come after the registry querying. Further, process injection often works only for specific builds of Windows (i.e. injecting a process in Windows 7 may not work the same way as injecting a process in Windows XP). I think that’s why we receive a runtime error when runnign this in Windows 7.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Can you identify any live memory modifications?&lt;/p&gt;

    &lt;p&gt;If svchost didn’t unexpectedly crash, I would view the process properties from within procexp and compare the strings in the image to the strings on disk, and, as is confirmed by &lt;a href=&quot;https://jmprsp.wordpress.com/2016/01/31/practical-malware-analysis-basic-dynamic-techniques-lab-3-03/&quot;&gt;jmprsp in his post on ch3 lab3&lt;/a&gt;, we would find that they are indeed very different, which demonstrates process injection as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the malware’s host-based indicators?&lt;/p&gt;

    &lt;p&gt;This question would be easier to answer if the program ran correctly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the purpose of this program?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;34&quot;&gt;3.4&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What happens when you run this file?&lt;/p&gt;

    &lt;p&gt;Running the file results in the file’s deleting itself!  (FINALLY, MALWARE THAT RUNS PROPERLY IN A WINDOWS 7 ENVIRONMENT WOOOO).&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.4.1proctree.PNG&quot; alt=&quot;3.4.1proctree.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;The process tree provided by ProcMon (view -&amp;gt; process tree) shows that cmd is spawned by Lab03-04.exe with a delete command for the initial binary. It doesn’t appear to do much more, despite the fact that there is lots of potential functionality, judging from the imported functions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is causing the roadblock in dynamic analysis?&lt;/p&gt;

    &lt;p&gt;If we look at the code using Ida, we see that it calls main passing in command line arguments…&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.4.1callmain.PNG&quot; alt=&quot;3.4.1callmain.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;and that something happens if there is only one argument passed to the program (i.e. if no command line arguments are passed in).&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch3_sc2/3.4.2main.PNG&quot; alt=&quot;3.4.2main.PNG&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Perhaps this is the issue.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are there other ways to run this program?&lt;/p&gt;

    &lt;p&gt;If we running the program on the command line (i.e. cmd.exe) we can easily pass in more arguments. However, without doing a deeper dive into what sorts of arguments it may require/need, we can’t further process what this program does. I suspect we’ll return to this program shortly after the Ida chapter.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Lab summary questions Considering malware analysis as a whole, how important is it to a general aspiring analyst to complete this chapter’s exercises?</summary></entry><entry><title type="html">PMA Ch.3 notes: Basic Dynamic Analysis</title><link href="http://localhost:4000/notes/2018/08/22/ch3_PMA_notes.html" rel="alternate" type="text/html" title="PMA Ch.3 notes: Basic Dynamic Analysis" /><published>2018-08-22T14:31:00-06:00</published><updated>2018-08-22T14:31:00-06:00</updated><id>http://localhost:4000/notes/2018/08/22/ch3_PMA_notes</id><content type="html" xml:base="http://localhost:4000/notes/2018/08/22/ch3_PMA_notes.html">&lt;h2 id=&quot;chapter-summary-questions&quot;&gt;Chapter summary questions&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In two sentences or less, provide an overview of what this chapter is about.&lt;/p&gt;

    &lt;p&gt;This chapter introduces dynamic analysis as well as the main tools used to perform it and how to use those tools. &lt;strong&gt;Dynamic analysis&lt;/strong&gt; is the act of observing a program run, and gathering information about what it’s doing by watching it do its thing in real time while monitoring the state of the machine with several tools.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the three most important takeaways from this chapter?&lt;/p&gt;

    &lt;p&gt;Dynamic Analysis is powerful for analytic reasons, but dangerous, since it involves actually running malware. It’s important to have properly set up a malware analysis environment before doing this form of analysis.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What problems does this chapter address? In other words, why should we care about this chapter?&lt;/p&gt;

    &lt;p&gt;The workflow introduced in this chapter is &lt;em&gt;typically&lt;/em&gt; the same workflow used to analyze most malware samples, and provides overview information to the analyst about what the malware does. It is effectively the second step of the analysis process and it will generally help direct the analyst’s efforts by showing them what they need to look more in depth at.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;terminology-and-keys&quot;&gt;Terminology and Keys&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Dynamic Analysis&lt;/strong&gt; is any examination performed during or after executing malware. It permits viewing of the malware’s true functionality.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Do static analysis first. Dynamic analysis is (obviously) much more dangerous.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sandboxes&lt;/strong&gt; are ($$$$) security mechanisms for running untrusted programs in a safe environment without fear of harming “real” systems.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;They are automated, and often make use of the CVD to check for common vulnerabilities being exploited.&lt;/li&gt;
  &lt;li&gt;They do, however, tend to just run the executable without command line options, which may not mimic the environment in which the malware was designed to execute in.&lt;/li&gt;
  &lt;li&gt;Like virtual machines, sandboxes are detectable and may report an exectuable as not malicious if it senses its in a sandbox and reacts differently than in normal circumstances.&lt;/li&gt;
  &lt;li&gt;Sandboxes can tell you specifics behind what a malware sample does, but it cannot perform overall semantic analysis.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Service Entries key: &lt;code class=&quot;highlighter-rouge&quot;&gt;HKLM\SYSTEM\CurrentControlSet\Services&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Services ran at startup: &lt;code class=&quot;highlighter-rouge&quot;&gt;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;page-to-page-notes&quot;&gt;Page-to-page notes&lt;/h2&gt;

&lt;h3 id=&quot;running-dlls&quot;&gt;Running DLLs&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;rundll32.exe&lt;/em&gt; is what we use to run functions or ordinals from DLL files. Syntax:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\rundll32.exe DLLname, export arguments
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, imagine you open up a file &lt;em&gt;rip.dll&lt;/em&gt; and examine its exports with PEView or with PE Explorer, and you see it has two exports: Install, Uninstall. You can run of these as such:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\rundll32.exe rip.dll, Install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Or if there are functions exported by ordinal (i.e. as an exported function with only an ordinal number), you do this sort of thing:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\rundll32.exe someDll.exe, #5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The pound (#) is important.&lt;/p&gt;

&lt;p&gt;DLLMain() is executed whenever a DLL is loaded, so you can often get information dynamically by forcing the DLL to load using runndll32.exe. Alternatively, a DLL can be turned into an executable by modifying the PE header and changing its extension to force Windows to load the DLL as it would an executable.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Modifying the PE header: wipe the &lt;code class=&quot;highlighter-rouge&quot;&gt;IMAGE_FILE_DLL&lt;/code&gt; (0x2000) flag from teh characteristics field in the &lt;code class=&quot;highlighter-rouge&quot;&gt;IMAGE_FILE_HEADER&lt;/code&gt;. This won’t run imported functions, but it will run the DLLMain() method.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Malware may install itself as a service too, potentially using a legit utility such as the convenient export &lt;code class=&quot;highlighter-rouge&quot;&gt;InstallService&lt;/code&gt; from ipr32x.dll:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\&amp;gt; rundll32 ipr32x.dll,InstallService serviceNameHere
C:\&amp;gt; net start serviceNameHere
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;sc&lt;/code&gt; on cmd to play with services as well.&lt;/p&gt;

&lt;p&gt;(I presume there is a 64 bit version of rundll for Windows but I’ve not looked into what it is at time of writing.)&lt;/p&gt;

&lt;h3 id=&quot;faking-a-network&quot;&gt;Faking a Network&lt;/h3&gt;
&lt;p&gt;If the malware reaches out to an external domain, it’s helpful to fake being that external domain to further watch how the malware behaves. The book discusses using ApateDNS and Netcat on p51, but I’m going to use INetSim on a Remnux box and Wireshark to observe network behavior (see further down for more details on INetSim).&lt;/p&gt;

&lt;h2 id=&quot;tools-discussed-in-this-section&quot;&gt;Tools discussed in this section&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;procmon&lt;/strong&gt; is an advanced, extremely helpful monitoring tool for Windows that provides a way to monitor certain registry, file system, network, process, and thread activity.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It can miss device driver activity of a user-mode component talking to a rootkit via device I/O controls, and can miss certain GUI calls such as &lt;code class=&quot;highlighter-rouge&quot;&gt;SetWindowsHookEx&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Generally, it shouldn’t be used for logging network activity, as it doesn’t work consistently across Microsoft Windows versions.&lt;/li&gt;
  &lt;li&gt;Using procmon: at and around pg44.&lt;/li&gt;
  &lt;li&gt;Filtering is super important with Procmon.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Process Explorer&lt;/strong&gt; is a free utility provided by Microsoft, probably as part of &lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite&quot;&gt;sysinternals&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use it for listing active processes, DLLs loaded by a process, various process properties, and overall system information. It can also be used to kill processes, log out users, and launch/validate processes.&lt;/li&gt;
  &lt;li&gt;It dynamically shows when new processes are created or modified, as well as what created them.&lt;/li&gt;
  &lt;li&gt;You can &lt;em&gt;verify&lt;/em&gt; binaries with it. There’s a verify button on the image tab, and the image tab is found when viewing a process’s properties. The verify button checks to see if the image on disk is the microsoft signed binary.
    &lt;ul&gt;
      &lt;li&gt;This can be used to identify process replacement/injection, since that involves modifying the executable, which’ll screw up the signature of the file.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;There is a strings window in the process properties collection of tabs as well. It can check for strings in the in-memory process as well as the on-disk image. If the strings vary greatly, you know that something fishy is going on.&lt;/li&gt;
  &lt;li&gt;You can use process explorer to launch depends.exe – Dependency Walker – on a running process. Right click a process name and select “Launch Depends.”&lt;/li&gt;
  &lt;li&gt;It can be used to analyze malicious documents by observing processes opened when clicking a malicious document. The image tab will tell you exactly where the malicious payload executed by the document is on disk.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Regshot&lt;/strong&gt; is used to take snapshots of the registry. Take the first shot before running the malware, and take the second shot after. It then tells you of all differences between the two snapshots.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wireshark&lt;/strong&gt; is briefly discussed on page 53.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INetSim&lt;/strong&gt; is free, Linux-based software for simulating common Internet servies. It’s widely accepted as the best tool for providing fake services, allowing you to analyze the network behavior by emulating servies such as HTTP(S), FTP, IRC, DNS, SMTP, and others. See page 55 of the book for a full list.&lt;/p&gt;

&lt;h2 id=&quot;malware-analysis-work-flow&quot;&gt;Malware Analysis Work Flow&lt;/h2&gt;
&lt;p&gt;Typically, you will use many of the tools simultaneously when executing and observing malware. My generic work flow sessions tend to go like this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;If you’re observing network traffic, set up your virtual network (instructions to do this will be provided later).&lt;/li&gt;
  &lt;li&gt;Run procmon but don’t capture events yet.&lt;/li&gt;
  &lt;li&gt;Start process explorer.&lt;/li&gt;
  &lt;li&gt;Start regshot.&lt;/li&gt;
  &lt;li&gt;If you’re observing network business, start Wireshark and INetSim on the remnux box.&lt;/li&gt;
  &lt;li&gt;Take a VMWare Snapshot so you can return to this point multiple times for multiple detonations of the malware.&lt;/li&gt;
  &lt;li&gt;Take the first registry snapshot.&lt;/li&gt;
  &lt;li&gt;Begin capturing procmon events. (regshot is super noisy and doing it outside of the procmon analysis window makes it such that that noise is ignored).&lt;/li&gt;
  &lt;li&gt;Detonate the malware!&lt;/li&gt;
  &lt;li&gt;Stop the capture of events after malware finishes running (or you’re done running it or whatever)&lt;/li&gt;
  &lt;li&gt;Take the second registry snapshot.&lt;/li&gt;
  &lt;li&gt;Analyze.&lt;/li&gt;
  &lt;li&gt;Revert back to the previous VMWare snapshot and do it again making whatever changes you want to make.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The book also provides a solid sample analysis sesh starting on page 57.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">PMA Ch.2 notes: Malware Analysis in Virtual Machines</title><link href="http://localhost:4000/notes/2018/08/22/ch2_PMA_notes.html" rel="alternate" type="text/html" title="PMA Ch.2 notes: Malware Analysis in Virtual Machines" /><published>2018-08-22T14:31:00-06:00</published><updated>2018-08-22T14:31:00-06:00</updated><id>http://localhost:4000/notes/2018/08/22/ch2_PMA_notes</id><content type="html" xml:base="http://localhost:4000/notes/2018/08/22/ch2_PMA_notes.html">&lt;h2 id=&quot;chapter-summary-questions&quot;&gt;Chapter summary questions&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In two sentences or less, provide an overview of what this chapter is about.&lt;/p&gt;

    &lt;p&gt;This short chapter discusses how to create a virtual environment to analyze malware in. It explains details about the author’s preferred tool, VMWare Workstation, and details how to create/configure a virtual machine, including details about virtual networking, snapshotting, using peripheral devices, VMWare’s record/replay feature, and provides discussion on the risks that must be considered when analyzing malware in ANY case.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the three most important takeaways from this chapter?&lt;/p&gt;

    &lt;p&gt;There is always some risk inherent with the field of malware analysis, but using the right tools can help attenuate the risk to an acceptable level.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What problems does this chapter address? In other words, why should we care about this chapter?&lt;/p&gt;

    &lt;p&gt;This chapter provides the key information behind how to set up the analysis environment used in the rest of the book.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;page-to-page-notes&quot;&gt;Page-to-page notes&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Structure of a VM: pg30&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Snapshotting&lt;/em&gt; is the act of saving the state of a VM and being able to revert back to it within seconds. THIS IS WHY VMWARE WORKSTATION IS NECESSARY. Player does not support this feature. Now’s the time when you agree and go buy workstation. :)&lt;/li&gt;
  &lt;li&gt;Configuring virtual networks using services machines such as Remnux: pg33&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;connecting malware to the internet is generally a bad plan. it can:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;spread around&lt;/li&gt;
      &lt;li&gt;Notify the author that it’s on a machine&lt;/li&gt;
      &lt;li&gt;drop more malware&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;etc etc&lt;/p&gt;

        &lt;p&gt;so NEVER connect malware to the internet without first doing some analysis to determine what it might do when it connects. Then, use your best judgement to determine whether or not it’s worth it to connect the malware to the internet.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Malware can detect if it’s running in a virtual machine, and it can behave differently if it is. Of course, at the end of the day, it’s just running instructions, and those can be checked for and modified by the analyst, but it all takes time.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;There is ALWAYS an inherent risk from running malware even with a virtual environment. Good practices can help attenuate the risk, but will never make the risk 0.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tools-discussed-in-this-section&quot;&gt;Tools discussed in this section&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.vmware.com/products/workstation-pro.html&quot;&gt;VMWare Workstation&lt;/a&gt;: potentially the most important piece of software for malware analysis.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Record and replay seemed especially neat and potentially useful. It records &lt;em&gt;every&lt;/em&gt; instruction executed in the process of a recording session. I’m sure there are uses for this.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Chapter summary questions In two sentences or less, provide an overview of what this chapter is about.</summary></entry><entry><title type="html">PMA Ch.1 Labs: Basic Static Analysis</title><link href="http://localhost:4000/lab_assignment/2018/07/31/PMA_Ch1_Labs.html" rel="alternate" type="text/html" title="PMA Ch.1 Labs: Basic Static Analysis" /><published>2018-07-31T14:12:00-06:00</published><updated>2018-07-31T14:12:00-06:00</updated><id>http://localhost:4000/lab_assignment/2018/07/31/PMA_Ch1_Labs</id><content type="html" xml:base="http://localhost:4000/lab_assignment/2018/07/31/PMA_Ch1_Labs.html">&lt;p&gt;In this category of posts, I’ll be detailing how I go about answering the end-of-chapter lab questions. There ARE going to be spoilers in the lab towards the end of the post (but I will clearly mark where the spoilers begin).&lt;/p&gt;

&lt;p&gt;I’ll also answer the following general questions in an attempt to keep the big picture of the assignments in mind:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Considering malware analysis as a whole, how important is it to a general aspiring analyst to complete this chapter’s exercises?&lt;/li&gt;
  &lt;li&gt;What did doing the lab exercises teach that was not gained from reading the chapter?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;lab-summary-questions&quot;&gt;Lab Summary questions&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Considering malware analysis as a whole, how important is it to a general aspiring analyst to complete this chapter’s exercises?&lt;/p&gt;

    &lt;p&gt;Super important! Static analysis is one of those things that seems easy and straightforward, but ends up being trickier to conduct than expected (for me, at least), due to the fact that I find myself questioning if the information I find is legit or planted.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What did doing the lab exercises teach that was not gained from reading the chapter?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Look &lt;strong&gt;very&lt;/strong&gt; carefully at the strings of the file– specifically at the names of .dll files!&lt;/li&gt;
      &lt;li&gt;Modification time and compilation time are definitely not the same thing. Compilation time can be found by putting the file into PEView and going to IMAGE_NT_HEADERS -&amp;gt; IMAGE_FILE_HEADER -&amp;gt; Time Date Stamp.&lt;/li&gt;
      &lt;li&gt;Virtual vs. raw sizes, identifiable using PEiD (at least for 32 bit exes) can be an indicator of packing. Per this &lt;a href=&quot;http://www.asmcommunity.net/forums/topic/?id=29605&quot;&gt;post&lt;/a&gt;:
        &lt;ul&gt;
          &lt;li&gt;Raw size: exactly the size of the section’s data &lt;em&gt;in the file&lt;/em&gt;&lt;/li&gt;
          &lt;li&gt;Virtual size: The size of the section &lt;em&gt;in memory&lt;/em&gt;
 So it makes sense that, if the section is larger in memory, something is unpacking into that section. Usually, the virtual size is smaller than the raw size.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;It seems evident now, but LoadResource, FindResource, and SizeOfResource functions imply the existence of something that ResourceHacker can help extract. As such, look around with ResourceHacker if you see these functions in the import list.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;challenges-encountered-in-the-labs&quot;&gt;Challenges Encountered in the labs&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;I wasn’t sure how to find the compilation time and wasn’t sure of if the modification time sufficed. The answer to this was made clear after checking the answers in the back of the book.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;lab-walkthrough-includes-answers&quot;&gt;Lab Walkthrough (includes answers!)&lt;/h2&gt;

&lt;h3 id=&quot;11&quot;&gt;1.1&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Upload to VT. Does the file match any existing antivirus signatures?&lt;/p&gt;

    &lt;p&gt;Indeed!&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch1_sc/1.1.1dll.PNG&quot; alt=&quot;1.1.1dll&quot; title=&quot;yee&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch1_sc/1.1.1exe.PNG&quot; alt=&quot;1.1.1exe&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When were these files compiled?&lt;/p&gt;

    &lt;p&gt;Not positive on how to find the exact date using a tool, but just viewing file properties and looking at the “last modified” entry gives the right answer for the .exe. Alternatively, this info is also provided by CFFExplorer.&lt;/p&gt;

    &lt;p&gt;After reading answers: see question 2 of the above section&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are there any indicators that these files are packed or obfuscated? If so, what are the indicators?&lt;/p&gt;

    &lt;p&gt;I argue no:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;The .exe and .dll disassemble successfully in IDA Demo&lt;/li&gt;
      &lt;li&gt;There are several imports identifiable by CFFExplorer which would otherwise be obfuscated &lt;img src=&quot;/files/ch1_sc/1.1.3dll.PNG&quot; alt=&quot;1.1.3dll&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do the imports hint at what the malware does?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Lab1.dll:
        &lt;ul&gt;
          &lt;li&gt;CreateProcess indicates it runs something.&lt;/li&gt;
          &lt;li&gt;from the book: WS2_32.dll provides network functions. So perhaps it’s exfiltrating stuff-n-things&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Lab1.exe:
        &lt;ul&gt;
          &lt;li&gt;CreateFileA/FindFileA: maybe it’s creating a log file, or checking for its own existence, or searching for specific files on a system (like SAM files)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Any other host-based indicators?&lt;/p&gt;

    &lt;p&gt;Running strings shows that the .exe has hard-coded within it “WARNING_THIS_WILL_DESTROY_YOUR_MACHINE” which can be easily grepped for.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What network-based indicators could be used to find this malware on infected machines?&lt;/p&gt;

    &lt;p&gt;Running strings on the .dll yields an IP address: 127.26.152.13. So look for traffic going to that IP address&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Guess as to the purpose of the files:&lt;/p&gt;

    &lt;p&gt;Search for certain files (and/or create them) and exfil them to an external site. My guess is it’s a keylogger or it’s seeking password files or something of the like.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;after-reading-the-book&quot;&gt;After reading the book:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Ahh, the .exe has a string “kerne132.dll”… ‘1’… didn’t notice that at first. Perfect host-based indicator.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;12&quot;&gt;1.2&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Existing antivirus definitions?&lt;/p&gt;

    &lt;p&gt;Absolutely: 43/66 say it’s malicious.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Obfuscation signs?&lt;/p&gt;

    &lt;p&gt;At a glance– some imports are clearly visible and are more in quantity than for typical packed malware.&lt;/p&gt;

    &lt;p&gt;However, Ida claims the imports section was destroyed. I trust Ida more than CFFExplorer since Ida costs like $2000.&lt;/p&gt;

    &lt;p&gt;Looking at strings from within Ida indicates a section called UPX1. UPX is a packer. Obfuscated it is!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do imports provide any juicy knowledge?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;GetProcAddressA and VirtualAlloc suggest this might be doing process injection.&lt;/li&gt;
      &lt;li&gt;CreateService suggests the malware establishes persistence.&lt;/li&gt;
      &lt;li&gt;InternetOpenA suggests the program talks out somewhere.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Indicators!&lt;/p&gt;

    &lt;p&gt;First, I unpacked the file using CFFExplorer and then put it back into Ida to discover, with Ida’s strings utility:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Host-based: strings shows “MalService” in our presence, and that string is passed as a parameter to CreateService: &lt;img src=&quot;/files/ch1_sc/1.2.4malservice.PNG&quot; alt=&quot;malservice&quot; /&gt; This would be a great indicator (albeit not reflective of what real malware might actually do (probably)). Further, there is a strange string “HGL345” used as a parameter to CreateMutex, which suggests if a mutex named HGL345 is on the system, we know this malware probably ran. &lt;img src=&quot;/files/ch1_sc/1.2.4HGL345.PNG&quot; alt=&quot;HGL345&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Network-based: strings yet again comes in clutch to show the presence of “http://malwareanalysisbook.com”.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;after-reading-the-book-1&quot;&gt;After reading the book:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;PEiD can be used to identify virtual vs. raw sizes of sections in memory. Therefore, a raw size of 0 but a virtual size of &amp;gt;0 is strong evidence of shenanigans. &lt;img src=&quot;/files/ch1_sc/1.2.4peid.PNG&quot; alt=&quot;peid&quot; title=&quot;Raw size: 0; yet virtual size=0x4000? HMMMMMMM&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;13&quot;&gt;1.3&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;VirusTotal it up.&lt;/p&gt;

    &lt;p&gt;55/66 claim EVIL (at this point, duh). Also, they say it’s packed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Obfuscations?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;For starters, VT claims it’s packed (i.e. a lot of the warnings say “Packer.FSG.A”).&lt;/li&gt;
      &lt;li&gt;Secondly, the ONLY two imports that exist within the file are “LoadLibraryA” and “GetProcAddress” which are the two imports associated with unpacking an executable.&lt;/li&gt;
      &lt;li&gt;Moreover, we have sections identified by PEiD as having a raw size of 0 and a virtual size of larger. It’s definitely packed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Imports hinting at functionality?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;can’t really answer without unpacking&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;indicators?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;can’t really answer without unpacking&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;14&quot;&gt;1.4&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;VT?
 53/67&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Obfuscations?&lt;/p&gt;

    &lt;p&gt;Ida disassembled it just fine. It has lots of imports. That’s reason enough for me to believe it’s not obfuscated.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Program compilation date?&lt;/p&gt;

    &lt;p&gt;PEView tells us the compilation date is 8/30/2019, which is BS since it isn’t 2019. Clearly this is spoofed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Imports hinting as to functionality?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;GetProcAddress/LoadLibraryA: searching for external code to run&lt;/li&gt;
      &lt;li&gt;CreateFile/MoveFile/WriteFile: It’s got the ability to create and write files. Keylogger? Reverse shell?&lt;/li&gt;
      &lt;li&gt;CreateRemoteThread: has ability to execute code in other programs. Process injection?&lt;/li&gt;
      &lt;li&gt;LookupPrivilegeValue: looking to see what permissions its running with perhaps?
 All this, combined with the antivirus vendor tags that say “backdoor”, tell me this is probably a backdoor into a machine that will give an adversary control.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;host/network based indicators?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Ida Strings: \system32\wupdmgr.exe is in there, which suggests this malware writes or modifies a file at that location with that name. Same with \winup.exe (which, &lt;a href=&quot;https://www.bleepingcomputer.com/startups/winup.exe-18972.html&quot;&gt;according to bleepingcomputer&lt;/a&gt;, is BAD and EVIL!&lt;/li&gt;
      &lt;li&gt;No clue WHY Ida doesn’t show ALL the strings, but it doesn’t. Strings.exe found the string “http://practicalmalwareanalysis.com/updater.exe” in the program. This may be a host-based AND network-based indicator!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;one resource in the resource section. Use ResourceHacker to examine it, and then to extract it. What does the resource tell us?&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/files/ch1_sc/1.4.6resource.PNG&quot; alt=&quot;resource&quot; /&gt; 
 This appears to be another executable file. Saving it and submitting the hash resulted in interestingness:
 &lt;img src=&quot;/files/ch1_sc/1.4.6resourceVT.PNG&quot; alt=&quot;resource2&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Cool– we get TWO malware samples for the price of ONE! My guess is that this sample drops a second executable and names it one of the above things (perhaps winup.exe).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The book tells us that we can use Resource Hacker to save just the resource. “Action -&amp;gt; save resource as binary file” takes care of that.&lt;/p&gt;

&lt;h6 id=&quot;la-ur-18-27643&quot;&gt;LA-UR-18-27643&lt;/h6&gt;</content><author><name></name></author><summary type="html">In this category of posts, I’ll be detailing how I go about answering the end-of-chapter lab questions. There ARE going to be spoilers in the lab towards the end of the post (but I will clearly mark where the spoilers begin).</summary></entry><entry><title type="html">PMA Ch.1: Basic Static Analysis Techniques</title><link href="http://localhost:4000/notes/2018/07/31/ch1_PMA_notes.html" rel="alternate" type="text/html" title="PMA Ch.1: Basic Static Analysis Techniques" /><published>2018-07-31T14:11:00-06:00</published><updated>2018-07-31T14:11:00-06:00</updated><id>http://localhost:4000/notes/2018/07/31/ch1_PMA_notes</id><content type="html" xml:base="http://localhost:4000/notes/2018/07/31/ch1_PMA_notes.html">&lt;p&gt;As I walk through the Practical Malware Analysis book, I’ll be doing two posts per studied chapter: one that acts as a brief overview of what I think is the most helpful content from the chapter, and one that walks through my analysis of the lab assignments.&lt;/p&gt;

&lt;p&gt;In addition to including technical details inscribed within the chapter, I’ll be answering the following questions in an attempt to keep in mind the big picture of the chapter.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In two sentences or less, provide an overview of what this chapter is about.&lt;/li&gt;
  &lt;li&gt;What are the three most important takeaways from this chapter?&lt;/li&gt;
  &lt;li&gt;What problems does this chapter address? In other words, why should we care about this chapter?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s get started.&lt;/p&gt;

&lt;h2 id=&quot;chapter-summary-questions&quot;&gt;Chapter summary questions&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In two sentences or less, provide an overview of what this chapter is about.&lt;/p&gt;

    &lt;p&gt;This chapter discusses basic static analysis of executable files and provides a slew of tools used to do so. Static analysis of a file is analysis that does NOT involve running the file, such as by examining the header of the file and looking for strings contained within.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the three most important takeaways from this chapter?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Static analysis is one tool in the toolbox for identifying malware, but there are ways to make static analysis virtually useless.&lt;/li&gt;
      &lt;li&gt;Section names are merely convention. They can be renamed to be misleading.&lt;/li&gt;
      &lt;li&gt;There are three kinds of linking: &lt;em&gt;static&lt;/em&gt;, &lt;em&gt;runtime&lt;/em&gt;, and &lt;em&gt;dynamic&lt;/em&gt;. Malware more frequently makes use of runtime linking due to how it’s easier to conceal runtime behavior using this version.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What problems does this chapter address? In other words, why should we care about this chapter?&lt;/p&gt;

    &lt;p&gt;Static analysis is the first step in analyzing any executable, and you should do it. It can provide clues that will pave the way for productive dynamic analysis.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;page-to-page-notes&quot;&gt;Page-to-page notes&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Ascii strings use 1 byte per char; Unicode strings use two per char.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Packed and otherwise obfuscated code will usually include library functions “GetProcAddress” and “LoadLibrary” as those two are typically used to decrypt/deobfuscate other functions. &lt;strong&gt;These two functions can be used to access any function in any library on the system.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Linking is used to connect code in libraries to an executable. There are three kinds of linking:
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Static:&lt;/em&gt; the library code is copied ver batim into the executable. Common in malware due to how it can be obfuscated; rare in goodware as there’s little purpose to do it other than to hide meaning of a program.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Runtime:&lt;/em&gt; Library code is searched for only when needed within a program, as opposed to at the beginning of execution of a program (see dynamic linking). It’s popular with malware writers as the imports can be concealed at the beginning of the program’s execution and revealed at some point in the runtie of the program, making static analysis harder.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Dynamic:&lt;/em&gt; The host OS searches for necessary libraries only when the program is loaded. When executing library code, the code executed is within the library’s space (i.e. it’s not copied somewhere and executed there).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Appendix A contains lots of DLLs of high interest to malware analysts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;a-little-about-the-pe-file-format&quot;&gt;A little about the PE file format&lt;/h4&gt;

&lt;p&gt;Consists of a header followed by a series of sections:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;.text&lt;/strong&gt;: Contains instructions that the CPU executes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;.rdata&lt;/strong&gt;: typically contains import and export information, which is the same info available from Dependency Walker (a tool) and PEViEW (a slightly out of date tool).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;.data&lt;/strong&gt;: Contains program’s global data, accessable from anywhere in the program.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;.rsrc&lt;/strong&gt;: includes resources used by the executable that are not ocnsidered part of the executable (such as icons, images, menus, and strings). Strings are usually (but not necessarily) stored here for multilanguage support.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These section names are convention; Windows doesn’t require them to be labeled as above. It determines what section is what based on info in the PE header.&lt;/p&gt;

&lt;h2 id=&quot;tools-discussed-in-this-section&quot;&gt;Tools discussed in this section&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://dependencywalker.com/&quot;&gt;Dependency Walker&lt;/a&gt; is a free utility that scans Windows executables and builds a hierarchical tree diagram of all dependent modules. 
P16 discusses a bit about how to use it.&lt;/p&gt;

&lt;p&gt;PeID: support was discontinued in 2011, but it is still helpful for detecting packed files.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wjradburn.com/software/&quot;&gt;PEview&lt;/a&gt;: used to view executable file metadata (i.e. information in the headers of an executable).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://angusj.com/&quot;&gt;Resource Hacker&lt;/a&gt;: browses the .rsrc section of an executable. P25 discusses usage of this tool. It also enables one to extract embedded files from within executable files.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.smidgeonsoft.prohosting.com/pebrowse-pro-file-viewer.html&quot;&gt;PEBrowse Professional&lt;/a&gt; is similar to PEview and allows you to look at the bytes from each section. It does a good job of presenting info from the resource (.rsrc) section.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://heaventools.com/&quot;&gt;PE Explorer&lt;/a&gt; has a rich GUI that allows one to navigate through the various parts of a PE file. It permits editing files, too. RIP if you don’t have money to pay for it, though.&lt;/p&gt;

&lt;h2 id=&quot;questions-encountered-and-answers-if-found&quot;&gt;Questions encountered (and answers, if found)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Ascii  representation of “BAD”:&lt;/em&gt;
0x42 0x41 0x44 0x00&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Unicode representation of “BAD”:&lt;/em&gt;
0x42 0x00 0x41 0x00 0x44 0x00 0x00 0x00&lt;/p&gt;

&lt;p&gt;What are the extra null terminators after each character typically used for?&lt;/p&gt;

&lt;h6 id=&quot;la-ur-18-27643&quot;&gt;LA-UR-18-27643&lt;/h6&gt;</content><author><name></name></author><summary type="html">As I walk through the Practical Malware Analysis book, I’ll be doing two posts per studied chapter: one that acts as a brief overview of what I think is the most helpful content from the chapter, and one that walks through my analysis of the lab assignments.</summary></entry><entry><title type="html">Markdown Cheatsheet for Github Pages/Jekyll Blog Posts</title><link href="http://localhost:4000/jekyll/documentation/howto/2018/07/24/frame.html" rel="alternate" type="text/html" title="Markdown Cheatsheet for Github Pages/Jekyll Blog Posts" /><published>2018-07-24T14:43:45-06:00</published><updated>2018-07-24T14:43:45-06:00</updated><id>http://localhost:4000/jekyll/documentation/howto/2018/07/24/frame</id><content type="html" xml:base="http://localhost:4000/jekyll/documentation/howto/2018/07/24/frame.html">&lt;p&gt;This post is a technical cheatsheet for syntactical constructs used to create pretty posts, specifically in the Jekyll/Github Pages environment. 
Much of the content here is taken directly from &lt;a href=&quot;https://jekyllrb.com/docs/posts/&quot;&gt;the Jekyll docs about writing docs&lt;/a&gt;, but I wanted to create a cheatsheet briefly summarizing what I think is the most helpful content.&lt;/p&gt;

&lt;p&gt;I found a generic markdown cheatsheet &lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;here&lt;/a&gt; but some things mentioned there don’t appear to work in this specific environment. Another Jekyll-specific cheatsheet can be found &lt;a href=&quot;https://gist.github.com/roachhd/779fa77e9b90fe945b0c&quot;&gt;here&lt;/a&gt; but it’s not super comprehensive– thus the need for this post here. 
Yet another link &lt;a href=&quot;http://nestacms.com/docs/creating-content/markdown-cheat-sheet&quot;&gt;here&lt;/a&gt; proved itself very helpful in the creation of this cheatsheet, too. 
&lt;a href=&quot;https://en.support.wordpress.com/markdown-quick-reference/&quot;&gt;Wordpress official quick reference&lt;/a&gt; has good info too.
I’ll be adding to it continuously over the next few days (probably weeks) as I learn more and more about what’s possible and as I test my markdown, so if it seems a little small or improperly formatted, you know why.&lt;/p&gt;

&lt;h2 id=&quot;formatting-text&quot;&gt;Formatting text&lt;/h2&gt;

&lt;p&gt;To create headers, use pounds symbols/hashtags.&lt;/p&gt;

&lt;h1 id=&quot;one-pound&quot;&gt;One pound&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;# One pound&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Question: Why does one pound result in smaller text than two?&lt;/p&gt;

&lt;h2 id=&quot;two-pounds&quot;&gt;Two pounds&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;## Two pounds&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;three-pounds&quot;&gt;Three pounds&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;### Three pounds&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;four-pounds&quot;&gt;Four pounds&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#### Four pounds&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;five-pounds&quot;&gt;Five pounds&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;##### Five pounds&lt;/code&gt;&lt;/p&gt;

&lt;h6 id=&quot;six-pounds&quot;&gt;Six pounds&lt;/h6&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;###### Six pounds&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Italics: &lt;em&gt;italic text here&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_italic text here_&lt;/code&gt;
or
&lt;code class=&quot;highlighter-rouge&quot;&gt;*italic text here*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Bold/Emphasis: &lt;strong&gt;bold text here&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__bold text here__&lt;/code&gt;
or
&lt;code class=&quot;highlighter-rouge&quot;&gt;**bold text here**&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Combine the two: &lt;strong&gt;B/I text &lt;em&gt;here&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;**B/I text _here_**&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* Bullet 1
* Bullet 2
  * Bullet 2a
    * Bullet 2b
* Bullet 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Renders as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Bullet 1&lt;/li&gt;
  &lt;li&gt;Bullet 2
    &lt;ul&gt;
      &lt;li&gt;Bullet 2.1
        &lt;ul&gt;
          &lt;li&gt;Bullet 2.1.1&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Bullet 3&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. item 1
2. item 2
	1. Item 2a
3. item 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Renders as:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;item 1&lt;/li&gt;
  &lt;li&gt;item 2
    &lt;ol&gt;
      &lt;li&gt;item 2a&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;item 3&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sadly, it seems that &lt;a href=&quot;https://meta.stackexchange.com/questions/85474/how-to-write-nested-numbered-lists&quot;&gt;markdown doesn’t support numbered sublists&lt;/a&gt; (such as 1, 2, 2.1, 2.2, 3, etc).&lt;/p&gt;

&lt;h2 id=&quot;tables&quot;&gt;Tables&lt;/h2&gt;

&lt;p&gt;Credit to the real MVP &lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;Adam-P&lt;/a&gt; for this sweet table example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| Tables        | Are           | Cool  |
| ------------- |:-------------:| -----:|
| col 3 is      | right-aligned | $1600 |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Renders as:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Tables&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Are&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Cool&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;col 3 is&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;right-aligned&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$1600&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;col 2 is&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;centered&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zebra stripes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;are neat&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;markdown-comments&quot;&gt;Markdown Comments&lt;/h2&gt;

&lt;p&gt;To make a single line markdown comment:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[/]: comment here&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that you may need to add some blank lines above or below to get the comment to register as a comment. Also, I don’t know why but things like &lt;code class=&quot;highlighter-rouge&quot;&gt;[asdf/]: comment text here&lt;/code&gt; register properly as comments too.&lt;/p&gt;

&lt;p&gt;To make a multiline markdown comment, HTML comment tags seem to work:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!--- 
line 1 here
line 2 here
...
line X here
--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;inserting-code-snippets&quot;&gt;Inserting code snippets&lt;/h2&gt;

&lt;p&gt;Jekyll makes use of something called Liquid to do &lt;a href=&quot;https://stackoverflow.com/questions/4026597/what-is-a-templating-language&quot;&gt;templates&lt;/a&gt;. It looks like there’s about a million and ten things you can do with this and they’re all nicely organized on &lt;a href=&quot;https://jekyllrb.com/docs/templates/&quot;&gt;Jekyll’s Liquid docs&lt;/a&gt;, so check that out there. 
If it ends up being super complex, I will write up another post explaining the basics of templating for noobs like myself.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;created with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
{% highlight ruby linenos %}
def print_hi(name)
  puts &quot;Hi, #{name}&quot;
end
print_hi('Tom')
#=&amp;gt; prints 'Hi, Tom' to STDOUT.
{% endhighlight %}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;posting-rawverbatim-code-blocks&quot;&gt;Posting raw/verbatim code blocks&lt;/h2&gt;
&lt;p&gt;This one took me a while to figure out. Encapsulate your stuff as follows but remove the spaces on the closing tag, and replace the double-triple-double backticks with just triple backticks (tricking the parser is hard and I’m not good at it yet).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
`` ``` `` 
{% raw %}
put your raw 
code stuff here
{ % endraw % }
`` ``` ``

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;inserting-links&quot;&gt;Inserting links&lt;/h2&gt;

&lt;p&gt;These require two lines of stuff:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;yadda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yadda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blahblah&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//OR
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yadda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yadda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//yourlinkhere.com/GettingGood) blahblah
// at bottom of doc, place this as is:
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;://&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yourlinkhere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GettingGood&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;inserting-pictures&quot;&gt;Inserting pictures&lt;/h2&gt;

&lt;h4 id=&quot;inserting-pictures-from-a-link&quot;&gt;Inserting pictures from a link&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://4.bp.blogspot.com/-lWOyJ3PiYfI/T_8z4Pl6EGI/AAAAAAAABwA/zjeB2UGEnCQ/s1600/zz.jpeg&quot; alt=&quot;sweet pic&quot; title=&quot;caption here&quot; /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;![sweet pic](http://4.bp.blogspot.com/-lWOyJ3PiYfI/T_8z4Pl6EGI/AAAAAAAABwA/zjeB2UGEnCQ/s1600/zz.jpeg &quot;caption here&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;inserting-local-pictures&quot;&gt;Inserting local pictures&lt;/h4&gt;
&lt;p&gt;Inserting local pictures can be done by identifying the path to the picture (treating the root part of the repo as the ‘root’ directory). The picture below is called ‘zz.jpeg’ and is in the ‘files’ directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/zz.jpeg&quot; alt=&quot;sweet pic&quot; title=&quot;caption here&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;![sweet pic](/files/zz.jpeg &quot;caption here&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

&lt;h6 id=&quot;la-ur-18-27643&quot;&gt;LA-UR-18-27643&lt;/h6&gt;</content><author><name></name></author><summary type="html">This post is a technical cheatsheet for syntactical constructs used to create pretty posts, specifically in the Jekyll/Github Pages environment. Much of the content here is taken directly from the Jekyll docs about writing docs, but I wanted to create a cheatsheet briefly summarizing what I think is the most helpful content.</summary></entry></feed>