<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-08-01T09:17:57-06:00</updated><id>http://localhost:4000/</id><title type="html">Kyle the (Aspiring) Reverser</title><subtitle>A home for a slew of miscellaneous technical (or not) blogs I write in the process of completing my Masters thesis.</subtitle><entry><title type="html">Practical Malware Analysis Ch.1 Labs</title><link href="http://localhost:4000/lab_assignment/2018/07/31/PMA_Ch3_Labs.html" rel="alternate" type="text/html" title="Practical Malware Analysis Ch.1 Labs" /><published>2018-07-31T14:12:00-06:00</published><updated>2018-07-31T14:12:00-06:00</updated><id>http://localhost:4000/lab_assignment/2018/07/31/PMA_Ch3_Labs</id><content type="html" xml:base="http://localhost:4000/lab_assignment/2018/07/31/PMA_Ch3_Labs.html">&lt;p&gt;In this category of posts, I’ll be detailing how I go about answering the end-of-chapter lab questions. There ARE going to be spoilers in the lab towards the end of the post (but I will clearly mark where the spoilers begin).&lt;/p&gt;

&lt;p&gt;I’ll also answer the following general questions in an attempt to keep the big picture of the assignments in mind:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Considering malware analysis as a whole, how important is it to a general aspiring analyst to complete this chapter’s exercises?&lt;/li&gt;
  &lt;li&gt;What did doing the lab exercises teach that was not gained from reading the chapter?&lt;/li&gt;
  &lt;li&gt;What are the three (or more) most notable challenges encountered in doing these exercises, and what did you do to overcome them?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;lab-summary-questions&quot;&gt;Lab Summary questions&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Considering malware analysis as a whole, how important is it to a general aspiring analyst to complete this chapter’s exercises?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What did doing the lab exercises teach that was not gained from reading the chapter?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the three (or more) most notable challenges encountered in doing these exercises, and what did you do to overcome them?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;challenges-encountered-in-the-labs&quot;&gt;Challenges Encountered in the labs&lt;/h2&gt;

&lt;p&gt;here&lt;/p&gt;

&lt;h2 id=&quot;final-answers-to-questions&quot;&gt;Final Answers to Questions&lt;/h2&gt;

&lt;p&gt;here&lt;/p&gt;</content><author><name></name></author><summary type="html">In this category of posts, I’ll be detailing how I go about answering the end-of-chapter lab questions. There ARE going to be spoilers in the lab towards the end of the post (but I will clearly mark where the spoilers begin).</summary></entry><entry><title type="html">Practical Malware Analysis Ch.1: Basic Static Analysis Techniques</title><link href="http://localhost:4000/notes/2018/07/31/ch1_PMA_notes.html" rel="alternate" type="text/html" title="Practical Malware Analysis Ch.1: Basic Static Analysis Techniques" /><published>2018-07-31T14:11:00-06:00</published><updated>2018-07-31T14:11:00-06:00</updated><id>http://localhost:4000/notes/2018/07/31/ch1_PMA_notes</id><content type="html" xml:base="http://localhost:4000/notes/2018/07/31/ch1_PMA_notes.html">&lt;p&gt;As I walk through the Practical Malware Analysis book, I’ll be doing two posts per studied chapter: one that acts as a brief overview of what I think is the most helpful content from the chapter, and one that walks through my analysis of the lab assignments.&lt;/p&gt;

&lt;p&gt;In addition to including technical details inscribed within the chapter, I’ll be answering the following questions in an attempt to keep in mind the big picture of the chapter.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In two sentences or less, provide an overview of what this chapter is about.&lt;/li&gt;
  &lt;li&gt;What are the three most important takeaways from this chapter?&lt;/li&gt;
  &lt;li&gt;What problems does this chapter address? In other words, why should we care about this chapter?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s get started.&lt;/p&gt;

&lt;h2 id=&quot;chapter-summary-questions&quot;&gt;Chapter summary questions&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In two sentences or less, provide an overview of what this chapter is about.&lt;/p&gt;

    &lt;p&gt;This chapter discusses basic static analysis of executable files and provides a slew of tools used to do so. Static analysis of a file is analysis that does NOT involve running the file, such as by examining the header of the file and looking for strings contained within.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the three most important takeaways from this chapter?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Static analysis is one tool in the toolbox for identifying malware, but there are ways to make static analysis virtually useless.&lt;/li&gt;
      &lt;li&gt;Section names are merely convention. They can be renamed to be misleading.&lt;/li&gt;
      &lt;li&gt;There are three kinds of linking: &lt;em&gt;static&lt;/em&gt;, &lt;em&gt;runtime&lt;/em&gt;, and &lt;em&gt;dynamic&lt;/em&gt;. Malware more frequently makes use of runtime linking due to how it’s easier to conceal runtime behavior using this version.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What problems does this chapter address? In other words, why should we care about this chapter?&lt;/p&gt;

    &lt;p&gt;Static analysis is the first step in analyzing any executable, and you should do it. It can provide clues that will pave the way for productive dynamic analysis.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;page-to-page-notes&quot;&gt;Page-to-page notes&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Ascii strings use 1 byte per char; Unicode strings use two per char.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Packed and otherwise obfuscated code will usually include library functions “GetProcAddress” and “LoadLibrary” as those two are typically used to decrypt/deobfuscate other functions. &lt;strong&gt;These two functions can be used to access any function in any library on the system.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Linking is used to connect code in libraries to an executable. There are three kinds of linking:
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Static:&lt;/em&gt; the library code is copied ver batim into the executable. Common in malware due to how it can be obfuscated; rare in goodware as there’s little purpose to do it other than to hide meaning of a program.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Runtime:&lt;/em&gt; Library code is searched for only when needed within a program, as opposed to at the beginning of execution of a program (see dynamic linking). It’s popular with malware writers as the imports can be concealed at the beginning of the program’s execution and revealed at some point in the runtie of the program, making static analysis harder.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Dynamic:&lt;/em&gt; The host OS searches for necessary libraries only when the program is loaded. When executing library code, the code executed is within the library’s space (i.e. it’s not copied somewhere and executed there).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Appendix A contains lots of DLLs of high interest to malware analysts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;a-little-about-the-pe-file-format&quot;&gt;A little about the PE file format&lt;/h4&gt;

&lt;p&gt;Consists of a header followed by a series of sections:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;.text&lt;/strong&gt;: Contains instructions that the CPU executes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;.rdata&lt;/strong&gt;: typically contains import and export information, which is the same info available from Dependency Walker (a tool) and PEViEW (a slightly out of date tool).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;.data&lt;/strong&gt;: Contains program’s global data, accessable from anywhere in the program.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;.rsrc&lt;/strong&gt;: includes resources used by the executable that are not ocnsidered part of the executable (such as icons, images, menus, and strings). Strings are usually (but not necessarily) stored here for multilanguage support.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These section names are convention; Windows doesn’t require them to be labeled as above. It determines what section is what based on info in the PE header.&lt;/p&gt;

&lt;h2 id=&quot;tools-discussed-in-this-section&quot;&gt;Tools discussed in this section&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://dependencywalker.com/&quot;&gt;Dependency Walker&lt;/a&gt; is a free utility that scans Windows executables and builds a hierarchical tree diagram of all dependent modules. 
P16 discusses a bit about how to use it.&lt;/p&gt;

&lt;p&gt;PeID: support was discontinued in 2011, but it is still helpful for detecting packed files.&lt;/p&gt;

&lt;p&gt;PEview: used to view executable file metadata (i.e. information in the headers of an executable).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://angusj.com/&quot;&gt;Resource Hacker&lt;/a&gt;: browses the .rsrc section of an executable. P25 discusses usage of this tool. It also enables one to extract embedded files from within executable files.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.smidgeonsoft.prohosting.com/pebrowse-pro-file-viewer.html&quot;&gt;PEBrowse Professional&lt;/a&gt; is similar to PEview and allows you to look at the bytes from each section. It does a good job of presenting info from the resource (.rsrc) section.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://heaventools.com/&quot;&gt;PE Explorer&lt;/a&gt; has a rich GUI that allows one to navigate through the various parts of a PE file. It permits editing files, too. RIP if you don’t have money to pay for it, though.&lt;/p&gt;

&lt;h2 id=&quot;questions-encountered-and-answers-if-found&quot;&gt;Questions encountered (and answers, if found)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Ascii  representation of “BAD”:&lt;/em&gt;
0x42 0x41 0x44 0x00&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Unicode representation of “BAD”:&lt;/em&gt;
0x42 0x00 0x41 0x00 0x44 0x00 0x00 0x00&lt;/p&gt;

&lt;p&gt;What are the extra null terminators after each character typically used for?&lt;/p&gt;</content><author><name></name></author><summary type="html">As I walk through the Practical Malware Analysis book, I’ll be doing two posts per studied chapter: one that acts as a brief overview of what I think is the most helpful content from the chapter, and one that walks through my analysis of the lab assignments.</summary></entry><entry><title type="html">Playing with Liquid</title><link href="http://localhost:4000/jekyll/documentation/howto/2018/07/30/playing_with_liquid.html" rel="alternate" type="text/html" title="Playing with Liquid" /><published>2018-07-30T13:37:00-06:00</published><updated>2018-07-30T13:37:00-06:00</updated><id>http://localhost:4000/jekyll/documentation/howto/2018/07/30/playing_with_liquid</id><content type="html" xml:base="http://localhost:4000/jekyll/documentation/howto/2018/07/30/playing_with_liquid.html">&lt;p&gt;Liquid is a templating language used with Jekyll, and it appears to have some significant power. This post will be dedicated to investigating just what’s possible using it. I started off by following the docs &lt;a href=&quot;https://shopify.github.io/liquid/basics/introduction/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Other resources:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/posts/&quot;&gt;simple liquid PoC things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/variables/&quot;&gt;global/site variable info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It looks like Liquid will be more helpful when I actually have some content that needs organizing. As such, I’m going to hold off on researching how this works until after I get some more posts.&lt;/p&gt;</content><author><name></name></author><summary type="html">Liquid is a templating language used with Jekyll, and it appears to have some significant power. This post will be dedicated to investigating just what’s possible using it. I started off by following the docs here.</summary></entry><entry><title type="html">Markdown Cheatsheet for Github Pages/Jekyll Blog Posts</title><link href="http://localhost:4000/jekyll/documentation/howto/2018/07/24/frame.html" rel="alternate" type="text/html" title="Markdown Cheatsheet for Github Pages/Jekyll Blog Posts" /><published>2018-07-24T14:43:45-06:00</published><updated>2018-07-24T14:43:45-06:00</updated><id>http://localhost:4000/jekyll/documentation/howto/2018/07/24/frame</id><content type="html" xml:base="http://localhost:4000/jekyll/documentation/howto/2018/07/24/frame.html">&lt;p&gt;This post is a technical cheatsheet for syntactical constructs used to create pretty posts, specifically in the Jekyll/Github Pages environment. 
Much of the content here is taken directly from &lt;a href=&quot;https://jekyllrb.com/docs/posts/&quot;&gt;the Jekyll docs about writing docs&lt;/a&gt;, but I wanted to create a cheatsheet briefly summarizing what I think is the most helpful content.&lt;/p&gt;

&lt;p&gt;I found a generic markdown cheatsheet &lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;here&lt;/a&gt; but some things mentioned there don’t appear to work in this specific environment. Another Jekyll-specific cheatsheet can be found &lt;a href=&quot;https://gist.github.com/roachhd/779fa77e9b90fe945b0c&quot;&gt;here&lt;/a&gt; but it’s not super comprehensive– thus the need for this post here. 
Yet another link &lt;a href=&quot;http://nestacms.com/docs/creating-content/markdown-cheat-sheet&quot;&gt;here&lt;/a&gt; proved itself very helpful in the creation of this cheatsheet, too. 
&lt;a href=&quot;https://en.support.wordpress.com/markdown-quick-reference/&quot;&gt;Wordpress official quick reference&lt;/a&gt; has good info too.
I’ll be adding to it continuously over the next few days (probably weeks) as I learn more and more about what’s possible and as I test my markdown, so if it seems a little small or improperly formatted, you know why.&lt;/p&gt;

&lt;h2 id=&quot;formatting-text&quot;&gt;Formatting text&lt;/h2&gt;

&lt;p&gt;To create headers, use pounds symbols/hashtags.&lt;/p&gt;

&lt;h1 id=&quot;one-pound&quot;&gt;One pound&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;# One pound&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Question: Why does one pound result in smaller text than two? I don’t know yet.&lt;/p&gt;

&lt;h2 id=&quot;two-pounds&quot;&gt;Two pounds&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;## Two pounds&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;three-pounds&quot;&gt;Three pounds&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;### Three pounds&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;four-pounds&quot;&gt;Four pounds&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#### Four pounds&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;five-pounds&quot;&gt;Five pounds&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;##### Five pounds&lt;/code&gt;&lt;/p&gt;

&lt;h6 id=&quot;six-pounds&quot;&gt;Six pounds&lt;/h6&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;###### Six pounds&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Italics: &lt;em&gt;italic text here&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_italic text here_&lt;/code&gt;
or
&lt;code class=&quot;highlighter-rouge&quot;&gt;*italic text here*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Bold/Emphasis: &lt;strong&gt;bold text here&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__bold text here__&lt;/code&gt;
or
&lt;code class=&quot;highlighter-rouge&quot;&gt;**bold text here**&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Combine the two: &lt;strong&gt;B/I text &lt;em&gt;here&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;**B/I text _here_**&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* Bullet 1
* Bullet 2
  * Bullet 2a
    * Bullet 2b
* Bullet 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Renders as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Bullet 1&lt;/li&gt;
  &lt;li&gt;Bullet 2
    &lt;ul&gt;
      &lt;li&gt;Bullet 2.1
        &lt;ul&gt;
          &lt;li&gt;Bullet 2.1.1&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Bullet 3&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. item 1
2. item 2
	1. Item 2a
3. item 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Renders as:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;item 1&lt;/li&gt;
  &lt;li&gt;item 2
    &lt;ol&gt;
      &lt;li&gt;item 2a&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;item 3&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sadly, it seems that &lt;a href=&quot;https://meta.stackexchange.com/questions/85474/how-to-write-nested-numbered-lists&quot;&gt;markdown doesn’t support numbered sublists&lt;/a&gt; (such as 1, 2, 2.1, 2.2, 3, etc).&lt;/p&gt;

&lt;h2 id=&quot;tables&quot;&gt;Tables&lt;/h2&gt;

&lt;p&gt;Credit to the real MVP &lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;Adam-P&lt;/a&gt; for this sweet table example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| Tables        | Are           | Cool  |
| ------------- |:-------------:| -----:|
| col 3 is      | right-aligned | $1600 |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Renders as:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Tables&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Are&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Cool&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;col 3 is&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;right-aligned&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$1600&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;col 2 is&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;centered&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zebra stripes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;are neat&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;markdown-comments&quot;&gt;Markdown Comments&lt;/h2&gt;

&lt;p&gt;To make a single line markdown comment:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[/]: comment here&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that you may need to add some blank lines above or below to get the comment to register as a comment. Also, I don’t know why but things like &lt;code class=&quot;highlighter-rouge&quot;&gt;[asdf/]: comment text here&lt;/code&gt; register properly as comments too.&lt;/p&gt;

&lt;p&gt;To make a multiline markdown comment, HTML comment tags seem to work:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!--- 
line 1 here
line 2 here
...
line X here
--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;inserting-code-snippets&quot;&gt;Inserting code snippets&lt;/h2&gt;

&lt;p&gt;Jekyll makes use of something called Liquid to do &lt;a href=&quot;https://stackoverflow.com/questions/4026597/what-is-a-templating-language&quot;&gt;templates&lt;/a&gt;. It looks like there’s about a million and ten things you can do with this and they’re all nicely organized on &lt;a href=&quot;https://jekyllrb.com/docs/templates/&quot;&gt;Jekyll’s Liquid docs&lt;/a&gt;, so check that out there. 
If it ends up being super complex, I will write up another post explaining the basics of templating for noobs like myself.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;created with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
{% highlight ruby linenos %}
def print_hi(name)
  puts &quot;Hi, #{name}&quot;
end
print_hi('Tom')
#=&amp;gt; prints 'Hi, Tom' to STDOUT.
{% endhighlight %}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;posting-rawverbatim-code-blocks&quot;&gt;Posting raw/verbatim code blocks&lt;/h2&gt;
&lt;p&gt;This one took me a while to figure out. Encapsulate your stuff as follows but remove the spaces on the closing tag, and replace the double-triple-double backticks with just triple backticks (tricking the parser is hard and I’m not good at it yet).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
`` ``` `` 
{% raw %}
put your raw 
code stuff here
{ % endraw % }
`` ``` ``

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;inserting-links&quot;&gt;Inserting links&lt;/h2&gt;

&lt;p&gt;These require two lines of stuff:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;yadda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yadda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blahblah&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//OR
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yadda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yadda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//yourlinkhere.com/GettingGood) blahblah
// at bottom of doc, place this as is:
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;://&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yourlinkhere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GettingGood&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;inserting-pictures&quot;&gt;Inserting pictures&lt;/h2&gt;

&lt;h4 id=&quot;inserting-pictures-from-a-link&quot;&gt;Inserting pictures from a link&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://4.bp.blogspot.com/-lWOyJ3PiYfI/T_8z4Pl6EGI/AAAAAAAABwA/zjeB2UGEnCQ/s1600/zz.jpeg&quot; alt=&quot;sweet pic&quot; title=&quot;caption here&quot; /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;![sweet pic](http://4.bp.blogspot.com/-lWOyJ3PiYfI/T_8z4Pl6EGI/AAAAAAAABwA/zjeB2UGEnCQ/s1600/zz.jpeg &quot;caption here&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;inserting-local-pictures&quot;&gt;Inserting local pictures&lt;/h4&gt;
&lt;p&gt;Inserting local pictures can be done by identifying the path to the picture (treating the root part of the repo as the ‘root’ directory). The picture below is called ‘zz.jpeg’ and is in the ‘files’ directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/zz.jpeg&quot; alt=&quot;sweet pic&quot; title=&quot;caption here&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;![sweet pic](/files/zz.jpeg &quot;caption here&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">This post is a technical cheatsheet for syntactical constructs used to create pretty posts, specifically in the Jekyll/Github Pages environment. Much of the content here is taken directly from the Jekyll docs about writing docs, but I wanted to create a cheatsheet briefly summarizing what I think is the most helpful content.</summary></entry></feed>